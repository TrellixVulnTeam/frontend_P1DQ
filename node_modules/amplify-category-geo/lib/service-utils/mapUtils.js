"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMapIamPolicies = exports.getMapFriendlyNames = exports.getCurrentMapParameters = exports.constructMapMetaParameters = exports.modifyMapResource = exports.createMapResource = void 0;
const mapParams_1 = require("./mapParams");
const constants_1 = require("./constants");
const constants_2 = require("../constants");
const mapStack_1 = require("../service-stacks/mapStack");
const resourceUtils_1 = require("./resourceUtils");
const core_1 = require("@aws-cdk/core");
const createMapResource = async (context, parameters) => {
    await resourceUtils_1.checkAuthConfig(context, parameters, constants_1.ServiceName.Map);
    const mapStack = new mapStack_1.MapStack(new core_1.App(), 'MapStack', parameters);
    resourceUtils_1.generateTemplateFile(mapStack, parameters.name);
    saveCFNParameters(parameters);
    const mapMetaParameters = exports.constructMapMetaParameters(parameters);
    if (parameters.isDefault) {
        await resourceUtils_1.updateDefaultResource(context, constants_1.ServiceName.Map);
    }
    context.amplify.updateamplifyMetaAfterResourceAdd(constants_2.category, parameters.name, mapMetaParameters);
};
exports.createMapResource = createMapResource;
const modifyMapResource = async (context, parameters) => {
    await resourceUtils_1.checkAuthConfig(context, parameters, constants_1.ServiceName.Map);
    const mapStack = new mapStack_1.MapStack(new core_1.App(), 'MapStack', parameters);
    resourceUtils_1.generateTemplateFile(mapStack, parameters.name);
    if (parameters.isDefault) {
        await resourceUtils_1.updateDefaultResource(context, constants_1.ServiceName.Map, parameters.name);
    }
    const paramsToUpdate = ['accessType'];
    paramsToUpdate.forEach(param => {
        context.amplify.updateamplifyMetaAfterResourceUpdate(constants_2.category, parameters.name, param, parameters[param]);
    });
};
exports.modifyMapResource = modifyMapResource;
function saveCFNParameters(parameters) {
    const params = {
        authRoleName: {
            "Ref": "AuthRoleName"
        },
        unauthRoleName: {
            "Ref": "UnauthRoleName"
        },
        mapName: parameters.name,
        mapStyle: mapParams_1.getGeoMapStyle(parameters.dataProvider, parameters.mapStyleType),
        pricingPlan: parameters.pricingPlan,
        isDefault: parameters.isDefault
    };
    resourceUtils_1.updateParametersFile(params, parameters.name, constants_1.parametersFileName);
}
const constructMapMetaParameters = (params) => {
    let result = {
        isDefault: params.isDefault,
        providerPlugin: constants_1.provider,
        service: constants_1.ServiceName.Map,
        mapStyle: mapParams_1.getGeoMapStyle(params.dataProvider, params.mapStyleType),
        pricingPlan: params.pricingPlan,
        accessType: params.accessType
    };
    return result;
};
exports.constructMapMetaParameters = constructMapMetaParameters;
const getCurrentMapParameters = async (mapName) => {
    const currentMapMetaParameters = await resourceUtils_1.readResourceMetaParameters(constants_1.ServiceName.Map, mapName);
    return {
        mapStyleType: mapParams_1.getMapStyleComponents(currentMapMetaParameters.mapStyle).mapStyleType,
        dataProvider: mapParams_1.getMapStyleComponents(currentMapMetaParameters.mapStyle).dataProvider,
        pricingPlan: currentMapMetaParameters.pricingPlan,
        accessType: currentMapMetaParameters.accessType,
        isDefault: currentMapMetaParameters.isDefault
    };
};
exports.getCurrentMapParameters = getCurrentMapParameters;
const getMapFriendlyNames = async (mapNames) => {
    const currentMapResources = await resourceUtils_1.getGeoServiceMeta(constants_1.ServiceName.Map);
    return mapNames.map(mapName => {
        var _a;
        const mapStyle = (_a = currentMapResources === null || currentMapResources === void 0 ? void 0 : currentMapResources[mapName]) === null || _a === void 0 ? void 0 : _a.mapStyle;
        return !!mapStyle ? `${mapName} (${mapStyle})` : mapName;
    });
};
exports.getMapFriendlyNames = getMapFriendlyNames;
const getMapIamPolicies = (resourceName, crudOptions) => {
    const policy = [];
    const actions = new Set();
    crudOptions.forEach(crudOption => {
        switch (crudOption) {
            case 'create':
                actions.add('geo:CreateMap');
                break;
            case 'read':
                actions.add('geo:DescribeMap');
                actions.add('geo:GetMapGlyphs');
                actions.add('geo:GetMapSprites');
                actions.add('geo:GetMapStyleDescriptor');
                actions.add('geo:GetMapTile');
                break;
            case 'delete':
                actions.add('geo:DeleteMap');
                break;
            default:
                break;
        }
    });
    let mapPolicy = {
        Effect: 'Allow',
        Action: Array.from(actions),
        Resource: [
            {
                'Fn::Join': [
                    '',
                    [
                        'arn:aws:geo:',
                        { Ref: 'AWS::Region' },
                        ':',
                        { Ref: 'AWS::AccountId' },
                        ':map/',
                        {
                            Ref: `${constants_2.category}${resourceName}Name`,
                        }
                    ],
                ],
            },
        ],
    };
    policy.push(mapPolicy);
    const attributes = ['Name'];
    return { policy, attributes };
};
exports.getMapIamPolicies = getMapIamPolicies;
//# sourceMappingURL=mapUtils.js.map