"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPlaceIndexIamPolicies = exports.getCurrentPlaceIndexParameters = exports.constructPlaceIndexMetaParameters = exports.modifyPlaceIndexResource = exports.createPlaceIndexResource = void 0;
const constants_1 = require("./constants");
const constants_2 = require("../constants");
const placeIndexStack_1 = require("../service-stacks/placeIndexStack");
const resourceUtils_1 = require("./resourceUtils");
const core_1 = require("@aws-cdk/core");
const createPlaceIndexResource = async (context, parameters) => {
    await resourceUtils_1.checkAuthConfig(context, parameters, constants_1.ServiceName.PlaceIndex);
    const placeIndexStack = new placeIndexStack_1.PlaceIndexStack(new core_1.App(), 'PlaceIndexStack', parameters);
    resourceUtils_1.generateTemplateFile(placeIndexStack, parameters.name);
    saveCFNParameters(parameters);
    const placeIndexMetaParameters = exports.constructPlaceIndexMetaParameters(parameters);
    if (parameters.isDefault) {
        await resourceUtils_1.updateDefaultResource(context, constants_1.ServiceName.PlaceIndex);
    }
    context.amplify.updateamplifyMetaAfterResourceAdd(constants_2.category, parameters.name, placeIndexMetaParameters);
};
exports.createPlaceIndexResource = createPlaceIndexResource;
const modifyPlaceIndexResource = async (context, parameters) => {
    await resourceUtils_1.checkAuthConfig(context, parameters, constants_1.ServiceName.PlaceIndex);
    const placeIndexStack = new placeIndexStack_1.PlaceIndexStack(new core_1.App(), 'PlaceIndexStack', parameters);
    resourceUtils_1.generateTemplateFile(placeIndexStack, parameters.name);
    if (parameters.isDefault) {
        await resourceUtils_1.updateDefaultResource(context, constants_1.ServiceName.PlaceIndex, parameters.name);
    }
    const paramsToUpdate = ['accessType'];
    paramsToUpdate.forEach(param => {
        context.amplify.updateamplifyMetaAfterResourceUpdate(constants_2.category, parameters.name, param, parameters[param]);
    });
};
exports.modifyPlaceIndexResource = modifyPlaceIndexResource;
function saveCFNParameters(parameters) {
    const params = {
        authRoleName: {
            "Ref": "AuthRoleName"
        },
        unauthRoleName: {
            "Ref": "UnauthRoleName"
        },
        indexName: parameters.name,
        dataProvider: parameters.dataProvider,
        dataSourceIntendedUse: parameters.dataSourceIntendedUse,
        pricingPlan: parameters.pricingPlan,
        isDefault: parameters.isDefault
    };
    resourceUtils_1.updateParametersFile(params, parameters.name, constants_1.parametersFileName);
}
const constructPlaceIndexMetaParameters = (params) => {
    let result = {
        isDefault: params.isDefault,
        providerPlugin: constants_1.provider,
        service: constants_1.ServiceName.PlaceIndex,
        dataProvider: params.dataProvider,
        dataSourceIntendedUse: params.dataSourceIntendedUse,
        pricingPlan: params.pricingPlan,
        accessType: params.accessType
    };
    return result;
};
exports.constructPlaceIndexMetaParameters = constructPlaceIndexMetaParameters;
const getCurrentPlaceIndexParameters = async (indexName) => {
    const currentIndexMetaParameters = await resourceUtils_1.readResourceMetaParameters(constants_1.ServiceName.PlaceIndex, indexName);
    return {
        dataProvider: currentIndexMetaParameters.dataProvider,
        dataSourceIntendedUse: currentIndexMetaParameters.dataSourceIntendedUse,
        pricingPlan: currentIndexMetaParameters.pricingPlan,
        accessType: currentIndexMetaParameters.accessType,
        isDefault: currentIndexMetaParameters.isDefault
    };
};
exports.getCurrentPlaceIndexParameters = getCurrentPlaceIndexParameters;
const getPlaceIndexIamPolicies = (resourceName, crudOptions) => {
    const policy = [];
    const actions = new Set();
    crudOptions.forEach(crudOption => {
        switch (crudOption) {
            case 'create':
                actions.add('geo:CreatePlaceIndex');
                break;
            case 'read':
                actions.add('geo:DescribePlaceIndex');
                actions.add('geo:SearchPlaceIndexForPosition');
                actions.add('geo:SearchPlaceIndexForText');
                break;
            case 'delete':
                actions.add('geo:DeletePlaceIndex');
                break;
            default:
                break;
        }
    });
    let placeIndexPolicy = {
        Effect: 'Allow',
        Action: Array.from(actions),
        Resource: [
            {
                'Fn::Join': [
                    '',
                    [
                        'arn:aws:geo:',
                        { Ref: 'AWS::Region' },
                        ':',
                        { Ref: 'AWS::AccountId' },
                        ':place-index/',
                        {
                            Ref: `${constants_2.category}${resourceName}Name`,
                        }
                    ],
                ],
            },
        ],
    };
    policy.push(placeIndexPolicy);
    const attributes = ['Name'];
    return { policy, attributes };
};
exports.getPlaceIndexIamPolicies = getPlaceIndexIamPolicies;
//# sourceMappingURL=placeIndexUtils.js.map