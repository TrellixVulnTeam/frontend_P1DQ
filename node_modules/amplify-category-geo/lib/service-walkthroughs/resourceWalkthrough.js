"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultResourceQuestion = exports.getServiceFriendlyName = exports.dataProviderWalkthrough = exports.pricingPlanWalkthrough = exports.resourceAccessWalkthrough = void 0;
const resourceParams_1 = require("../service-utils/resourceParams");
const constants_1 = require("../service-utils/constants");
const resourceParams_2 = require("../service-utils/resourceParams");
const amplify_cli_core_1 = require("amplify-cli-core");
const amplify_prompts_1 = require("amplify-prompts");
async function resourceAccessWalkthrough(parameters, service) {
    const accessChoices = [
        { name: 'Authorized users only', value: resourceParams_1.AccessType.AuthorizedUsers },
        { name: 'Authorized and Guest users', value: resourceParams_1.AccessType.AuthorizedAndGuestUsers }
    ];
    let accessTypeDefaultIndex = 0;
    if (parameters.accessType === resourceParams_1.AccessType.AuthorizedAndGuestUsers) {
        accessTypeDefaultIndex = 1;
    }
    parameters.accessType = await amplify_prompts_1.prompter.pick(`Who can access this ${exports.getServiceFriendlyName(service)}?`, accessChoices, { initial: accessTypeDefaultIndex });
    return parameters;
}
exports.resourceAccessWalkthrough = resourceAccessWalkthrough;
;
async function pricingPlanWalkthrough(context, parameters) {
    let pricingPlan = parameters.pricingPlan ? parameters.pricingPlan : resourceParams_2.PricingPlan.RequestBasedUsage;
    amplify_prompts_1.printer.info(constants_1.choosePricingPlan);
    const pricingPlanBusinessTypeChoices = [
        { name: "No, I do not track devices or I only need to track consumers' personal devices", value: resourceParams_2.PricingPlan.RequestBasedUsage },
        { name: 'Yes, I track commercial assets (For example, any mobile object that is tracked by a company in support of its business)', value: 'Unknown' },
        { name: 'Learn More', value: 'LearnMore' }
    ];
    const pricingPlanChoiceDefaultIndex = pricingPlan === resourceParams_2.PricingPlan.RequestBasedUsage ? 0 : 1;
    let pricingPlanBusinessTypeChoice = await amplify_prompts_1.prompter.pick('Are you tracking commercial assets for your business in your app?', pricingPlanBusinessTypeChoices, { initial: pricingPlanChoiceDefaultIndex });
    while (pricingPlanBusinessTypeChoice === 'LearnMore') {
        amplify_cli_core_1.open(constants_1.apiDocs.pricingPlan, { wait: false });
        pricingPlanBusinessTypeChoice = await amplify_prompts_1.prompter.pick('Are you tracking commercial assets for your business in your app?', pricingPlanBusinessTypeChoices, { initial: pricingPlanChoiceDefaultIndex });
    }
    if (pricingPlanBusinessTypeChoice === resourceParams_2.PricingPlan.RequestBasedUsage) {
        pricingPlan = resourceParams_2.PricingPlan.RequestBasedUsage;
    }
    else {
        const pricingPlanRoutingChoice = await amplify_prompts_1.prompter.yesOrNo('Does your app provide routing or route optimization for commercial assets?', pricingPlan === resourceParams_2.PricingPlan.MobileAssetManagement ? true : false);
        pricingPlan = pricingPlanRoutingChoice ? resourceParams_2.PricingPlan.MobileAssetManagement : resourceParams_2.PricingPlan.MobileAssetTracking;
    }
    parameters.pricingPlan = pricingPlan;
    amplify_prompts_1.printer.info(`Successfully set ${pricingPlan} pricing plan for your Geo resources.`);
    return parameters;
}
exports.pricingPlanWalkthrough = pricingPlanWalkthrough;
;
async function dataProviderWalkthrough(parameters, service) {
    const dataProviderInput = await amplify_prompts_1.prompter.pick(`Specify the data provider of geospatial data for this ${exports.getServiceFriendlyName(service)}:`, Object.values(resourceParams_1.DataProvider), { initial: (parameters.dataProvider === resourceParams_1.DataProvider.Here) ? 1 : 0 });
    const provider = (Object.keys(resourceParams_1.DataProvider).find(key => resourceParams_1.DataProvider[key] === dataProviderInput));
    parameters.dataProvider = provider;
    return parameters;
}
exports.dataProviderWalkthrough = dataProviderWalkthrough;
;
const getServiceFriendlyName = (service) => {
    switch (service) {
        case constants_1.ServiceName.PlaceIndex:
            return 'search index';
        default:
            return service;
    }
};
exports.getServiceFriendlyName = getServiceFriendlyName;
const defaultResourceQuestion = (service) => {
    const friendlyServiceName = exports.getServiceFriendlyName(service);
    return `Set this ${friendlyServiceName} as the default? It will be used in Amplify ${friendlyServiceName} API calls if no explicit reference is provided.`;
};
exports.defaultResourceQuestion = defaultResourceQuestion;
//# sourceMappingURL=resourceWalkthrough.js.map