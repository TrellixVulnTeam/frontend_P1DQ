"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removePlaceIndexResource = exports.updatePlaceIndexResource = exports.addPlaceIndexResource = void 0;
const placeIndexUtils_1 = require("../service-utils/placeIndexUtils");
const removeWalkthrough_1 = require("../service-walkthroughs/removeWalkthrough");
const constants_1 = require("../constants");
const placeIndexWalkthrough_1 = require("../service-walkthroughs/placeIndexWalkthrough");
const placeIndexParams_1 = require("../service-utils/placeIndexParams");
const index_1 = require("./index");
const constants_2 = require("../service-utils/constants");
const amplify_prompts_1 = require("amplify-prompts");
const addPlaceIndexResource = async (context) => {
    let placeIndexParams = {
        providerContext: index_1.setProviderContext(context, constants_2.ServiceName.PlaceIndex)
    };
    await placeIndexWalkthrough_1.createPlaceIndexWalkthrough(context, placeIndexParams);
    const completeParameters = placeIndexParams_1.convertToCompletePlaceIndexParams(placeIndexParams);
    await placeIndexUtils_1.createPlaceIndexResource(context, completeParameters);
    amplify_prompts_1.printer.success(`Successfully added resource ${completeParameters.name} locally.`);
    index_1.printNextStepsSuccessMessage(context);
    return completeParameters.name;
};
exports.addPlaceIndexResource = addPlaceIndexResource;
const updatePlaceIndexResource = async (context) => {
    let placeIndexParams = {
        providerContext: index_1.setProviderContext(context, constants_2.ServiceName.PlaceIndex)
    };
    await placeIndexWalkthrough_1.updatePlaceIndexWalkthrough(context, placeIndexParams);
    if (placeIndexParams.name && placeIndexParams.isDefault !== undefined && placeIndexParams.accessType) {
        placeIndexUtils_1.modifyPlaceIndexResource(context, {
            accessType: placeIndexParams.accessType,
            name: placeIndexParams.name,
            isDefault: placeIndexParams.isDefault
        });
    }
    else {
        throw index_1.insufficientInfoForUpdateError(constants_2.ServiceName.PlaceIndex);
    }
    amplify_prompts_1.printer.success(`Successfully updated resource ${placeIndexParams.name} locally.`);
    index_1.printNextStepsSuccessMessage(context);
    return placeIndexParams.name;
};
exports.updatePlaceIndexResource = updatePlaceIndexResource;
const removePlaceIndexResource = async (context) => {
    const { amplify } = context;
    const resourceToRemove = await removeWalkthrough_1.removeWalkthrough(context, constants_2.ServiceName.PlaceIndex);
    if (!resourceToRemove)
        return;
    const resourceParameters = await placeIndexUtils_1.getCurrentPlaceIndexParameters(resourceToRemove);
    try {
        await amplify.removeResource(context, constants_1.category, resourceToRemove)
            .then(async (resource) => {
            if ((resource === null || resource === void 0 ? void 0 : resource.service) === constants_2.ServiceName.PlaceIndex && resourceParameters.isDefault) {
                await placeIndexWalkthrough_1.updateDefaultPlaceIndexWalkthrough(context, resource.resourceName);
            }
        });
    }
    catch (err) {
        if (err.stack) {
            amplify_prompts_1.printer.error(err.stack);
            amplify_prompts_1.printer.error(err.message);
            amplify_prompts_1.printer.error(`An error occurred when removing the geo resource ${resourceToRemove}`);
        }
        context.usageData.emitError(err);
        process.exitCode = 1;
    }
    index_1.printNextStepsSuccessMessage(context);
    return resourceToRemove;
};
exports.removePlaceIndexResource = removePlaceIndexResource;
//# sourceMappingURL=placeIndex.js.map