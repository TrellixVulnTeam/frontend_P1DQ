"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.insufficientInfoForUpdateError = exports.openConsole = exports.setProviderContext = exports.printNextStepsSuccessMessage = exports.projectHasAuth = exports.removeResource = exports.updateResource = exports.addResource = void 0;
const constants_1 = require("../service-utils/constants");
const amplify_cli_core_1 = require("amplify-cli-core");
const placeIndex_1 = require("./placeIndex");
const map_1 = require("./map");
const amplify_prompts_1 = require("amplify-prompts");
const resourceWalkthrough_1 = require("../service-walkthroughs/resourceWalkthrough");
const addResource = async (context, service) => {
    if (!exports.projectHasAuth()) {
        if (await amplify_prompts_1.prompter.yesOrNo('geo category resources require auth (Amazon Cognito). Do you want to add auth now?')) {
            await context.amplify.invokePluginMethod(context, 'auth', undefined, 'add', [context]);
        }
        else {
            amplify_prompts_1.printer.info('Please add auth (Amazon Cognito) to your project using "amplify add auth"');
            return;
        }
    }
    switch (service) {
        case constants_1.ServiceName.Map:
            return map_1.addMapResource(context);
        case constants_1.ServiceName.PlaceIndex:
            return placeIndex_1.addPlaceIndexResource(context);
        default:
            throw badServiceError(service);
    }
};
exports.addResource = addResource;
const updateResource = async (context, service) => {
    switch (service) {
        case constants_1.ServiceName.Map:
            return map_1.updateMapResource(context);
        case constants_1.ServiceName.PlaceIndex:
            return placeIndex_1.updatePlaceIndexResource(context);
        default:
            throw badServiceError(service);
    }
};
exports.updateResource = updateResource;
const removeResource = async (context, service) => {
    switch (service) {
        case constants_1.ServiceName.Map:
            return map_1.removeMapResource(context);
        case constants_1.ServiceName.PlaceIndex:
            return placeIndex_1.removePlaceIndexResource(context);
        default:
            throw badServiceError(service);
    }
};
exports.removeResource = removeResource;
const projectHasAuth = () => {
    var _a;
    return !!Object.values(((_a = amplify_cli_core_1.stateManager.getMeta()) === null || _a === void 0 ? void 0 : _a.auth) || {}).find(meta => { var _a; return ((_a = meta) === null || _a === void 0 ? void 0 : _a.service) === 'Cognito'; });
};
exports.projectHasAuth = projectHasAuth;
const printNextStepsSuccessMessage = (context) => {
    amplify_prompts_1.printer.blankLine();
    amplify_prompts_1.printer.success('Next steps:');
    amplify_prompts_1.printer.info('"amplify push" builds all of your local backend resources and provisions them in the cloud');
    amplify_prompts_1.printer.info('"amplify publish" builds all of your local backend and front-end resources (if you added hosting category) and provisions them in the cloud');
};
exports.printNextStepsSuccessMessage = printNextStepsSuccessMessage;
const setProviderContext = (context, service) => {
    return {
        provider: constants_1.provider,
        service: service,
        projectName: context.amplify.getProjectDetails().projectConfig.projectName,
    };
};
exports.setProviderContext = setProviderContext;
const openConsole = (service) => {
    const amplifyMeta = amplify_cli_core_1.stateManager.getMeta();
    const region = amplifyMeta.providers[constants_1.provider].Region;
    let selection;
    switch (service) {
        case constants_1.ServiceName.Map:
            selection = "maps";
            break;
        case constants_1.ServiceName.PlaceIndex:
            selection = "places";
            break;
        default:
            selection = undefined;
    }
    let url = `https://${region}.console.aws.amazon.com/location/home?region=${region}#/`;
    if (selection) {
        url = `https://${region}.console.aws.amazon.com/location/${selection}/home?region=${region}#/`;
    }
    amplify_cli_core_1.open(url, { wait: false });
};
exports.openConsole = openConsole;
const badServiceError = (service) => {
    return new Error(`amplify-category-geo is not configured to provide service type ${service}`);
};
const insufficientInfoForUpdateError = (service) => {
    new Error(`Insufficient information to update ${resourceWalkthrough_1.getServiceFriendlyName(service)}. Please re-try and provide all inputs.`);
};
exports.insufficientInfoForUpdateError = insufficientInfoForUpdateError;
//# sourceMappingURL=index.js.map