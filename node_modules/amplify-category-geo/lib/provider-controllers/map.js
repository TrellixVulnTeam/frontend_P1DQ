"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeMapResource = exports.updateMapResource = exports.addMapResource = void 0;
const mapUtils_1 = require("../service-utils/mapUtils");
const removeWalkthrough_1 = require("../service-walkthroughs/removeWalkthrough");
const constants_1 = require("../constants");
const mapWalkthrough_1 = require("../service-walkthroughs/mapWalkthrough");
const mapParams_1 = require("../service-utils/mapParams");
const index_1 = require("./index");
const constants_2 = require("../service-utils/constants");
const amplify_prompts_1 = require("amplify-prompts");
const addMapResource = async (context) => {
    let mapParams = {
        providerContext: index_1.setProviderContext(context, constants_2.ServiceName.Map)
    };
    await mapWalkthrough_1.createMapWalkthrough(context, mapParams);
    const completeParameters = mapParams_1.convertToCompleteMapParams(mapParams);
    await mapUtils_1.createMapResource(context, completeParameters);
    amplify_prompts_1.printer.success(`Successfully added resource ${completeParameters.name} locally.`);
    index_1.printNextStepsSuccessMessage(context);
    return completeParameters.name;
};
exports.addMapResource = addMapResource;
const updateMapResource = async (context) => {
    let mapParams = {
        providerContext: index_1.setProviderContext(context, constants_2.ServiceName.Map)
    };
    await mapWalkthrough_1.updateMapWalkthrough(context, mapParams);
    if (mapParams.name && mapParams.isDefault !== undefined && mapParams.accessType) {
        mapUtils_1.modifyMapResource(context, {
            accessType: mapParams.accessType,
            name: mapParams.name,
            isDefault: mapParams.isDefault
        });
    }
    else {
        throw index_1.insufficientInfoForUpdateError(constants_2.ServiceName.Map);
    }
    amplify_prompts_1.printer.success(`Successfully updated resource ${mapParams.name} locally.`);
    index_1.printNextStepsSuccessMessage(context);
    return mapParams.name;
};
exports.updateMapResource = updateMapResource;
const removeMapResource = async (context) => {
    const { amplify } = context;
    const resourceToRemove = await removeWalkthrough_1.removeWalkthrough(context, constants_2.ServiceName.Map);
    if (!resourceToRemove)
        return;
    const resourceParameters = await mapUtils_1.getCurrentMapParameters(resourceToRemove);
    try {
        await amplify.removeResource(context, constants_1.category, resourceToRemove)
            .then(async (resource) => {
            if ((resource === null || resource === void 0 ? void 0 : resource.service) === constants_2.ServiceName.Map && resourceParameters.isDefault) {
                await mapWalkthrough_1.updateDefaultMapWalkthrough(context, resource.resourceName);
            }
        });
    }
    catch (err) {
        if (err.stack) {
            amplify_prompts_1.printer.error(err.stack);
            amplify_prompts_1.printer.error(err.message);
            amplify_prompts_1.printer.error(`An error occurred when removing the geo resource ${resourceToRemove}`);
        }
        context.usageData.emitError(err);
        process.exitCode = 1;
    }
    index_1.printNextStepsSuccessMessage(context);
    return resourceToRemove;
};
exports.removeMapResource = removeMapResource;
//# sourceMappingURL=map.js.map