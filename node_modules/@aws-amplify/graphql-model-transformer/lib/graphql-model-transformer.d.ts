import { SyncConfig, TransformerModelBase } from '@aws-amplify/graphql-transformer-core';
import { AppSyncDataSourceType, DataSourceInstance, MutationFieldType, QueryFieldType, SubscriptionFieldType, TransformerContextProvider, TransformerModelProvider, TransformerPrepareStepContextProvider, TransformerResolverProvider, TransformerSchemaVisitStepContextProvider, TransformerTransformSchemaStepContextProvider } from '@aws-amplify/graphql-transformer-interfaces';
import { DirectiveNode, InputValueDefinitionNode, ObjectTypeDefinitionNode } from 'graphql';
export declare type Nullable<T> = T | null;
export declare type OptionalAndNullable<T> = Partial<T>;
export declare enum SubscriptionLevel {
    off = "off",
    public = "public",
    on = "on"
}
export declare type ModelDirectiveConfiguration = {
    queries?: OptionalAndNullable<{
        get: OptionalAndNullable<string>;
        list: OptionalAndNullable<string>;
        sync: OptionalAndNullable<string>;
    }>;
    mutations: {
        create: OptionalAndNullable<string>;
        update: OptionalAndNullable<string>;
        delete: OptionalAndNullable<string>;
    } | null;
    subscriptions: {
        onCreate: OptionalAndNullable<string>[];
        onUpdate: OptionalAndNullable<string>[];
        onDelete: OptionalAndNullable<string>[];
        level: Partial<SubscriptionLevel>;
    } | null;
    timestamps: OptionalAndNullable<{
        createdAt: OptionalAndNullable<string>;
        updatedAt: OptionalAndNullable<string>;
    }>;
};
export declare const directiveDefinition = "\n  directive @model(\n    queries: ModelQueryMap\n    mutations: ModelMutationMap\n    subscriptions: ModelSubscriptionMap\n    timestamps: TimestampConfiguration\n  ) on OBJECT\n  input ModelMutationMap {\n    create: String\n    update: String\n    delete: String\n  }\n  input ModelQueryMap {\n    get: String\n    list: String\n  }\n  input ModelSubscriptionMap {\n    onCreate: [String]\n    onUpdate: [String]\n    onDelete: [String]\n    level: ModelSubscriptionLevel\n  }\n  enum ModelSubscriptionLevel {\n    off\n    public\n    on\n  }\n  input TimestampConfiguration {\n    createdAt: String\n    updatedAt: String\n  }\n";
declare type ModelTransformerOptions = {
    EnableDeletionProtection?: boolean;
    SyncConfig?: SyncConfig;
};
export declare class ModelTransformer extends TransformerModelBase implements TransformerModelProvider {
    private options;
    private datasourceMap;
    private ddbTableMap;
    private resolverMap;
    private typesWithModelDirective;
    private modelDirectiveConfig;
    constructor(options?: ModelTransformerOptions);
    object: (definition: ObjectTypeDefinitionNode, directive: DirectiveNode, ctx: TransformerSchemaVisitStepContextProvider) => void;
    validate: () => void;
    prepare: (context: TransformerPrepareStepContextProvider) => void;
    transformSchema: (ctx: TransformerTransformSchemaStepContextProvider) => void;
    generateResolvers: (context: TransformerContextProvider) => void;
    generateGetResolver: (ctx: TransformerContextProvider, type: ObjectTypeDefinitionNode, typeName: string, fieldName: string) => TransformerResolverProvider;
    generateListResolver: (ctx: TransformerContextProvider, type: ObjectTypeDefinitionNode, typeName: string, fieldName: string) => TransformerResolverProvider;
    generateUpdateResolver: (ctx: TransformerContextProvider, type: ObjectTypeDefinitionNode, typeName: string, fieldName: string) => TransformerResolverProvider;
    generateDeleteResolver: (ctx: TransformerContextProvider, type: ObjectTypeDefinitionNode, typeName: string, fieldName: string) => TransformerResolverProvider;
    generateOnCreateResolver: (ctx: TransformerContextProvider, type: ObjectTypeDefinitionNode, typeName: string, fieldName: string) => TransformerResolverProvider;
    generateOnUpdateResolver: (ctx: TransformerContextProvider, type: ObjectTypeDefinitionNode, typeName: string, fieldName: string) => TransformerResolverProvider;
    generateOnDeleteResolver: (ctx: TransformerContextProvider, type: ObjectTypeDefinitionNode, typeName: string, fieldName: string) => TransformerResolverProvider;
    generateSyncResolver: (ctx: TransformerContextProvider, type: ObjectTypeDefinitionNode, typeName: string, fieldName: string) => TransformerResolverProvider;
    getQueryFieldNames: (ctx: TransformerTransformSchemaStepContextProvider, type: ObjectTypeDefinitionNode) => Set<{
        fieldName: string;
        typeName: string;
        type: QueryFieldType;
    }>;
    getMutationFieldNames: (ctx: TransformerTransformSchemaStepContextProvider, type: ObjectTypeDefinitionNode) => Set<{
        fieldName: string;
        typeName: string;
        type: MutationFieldType;
    }>;
    getMutationName: (subscriptionType: SubscriptionFieldType, mutationMap: Set<{
        fieldName: string;
        typeName: string;
        type: MutationFieldType;
    }>) => string;
    private createQueryFields;
    private createMutationFields;
    private createSubscriptionFields;
    getSubscriptionFieldNames: (ctx: TransformerTransformSchemaStepContextProvider, type: ObjectTypeDefinitionNode) => Set<{
        fieldName: string;
        typeName: string;
        type: SubscriptionFieldType;
    }>;
    getDataSourceResource: (ctx: TransformerContextProvider, type: ObjectTypeDefinitionNode) => DataSourceInstance;
    getDataSourceType: () => AppSyncDataSourceType;
    generateCreateResolver: (ctx: TransformerContextProvider, type: ObjectTypeDefinitionNode, typeName: string, fieldName: string) => TransformerResolverProvider;
    getInputs: (ctx: TransformerTransformSchemaStepContextProvider, type: ObjectTypeDefinitionNode, operation: {
        fieldName: string;
        typeName: string;
        type: QueryFieldType | MutationFieldType | SubscriptionFieldType;
    }) => InputValueDefinitionNode[];
    getOutputType: (ctx: TransformerTransformSchemaStepContextProvider, type: ObjectTypeDefinitionNode, operation: {
        fieldName: string;
        typeName: string;
        type: QueryFieldType | MutationFieldType | SubscriptionFieldType;
    }) => ObjectTypeDefinitionNode;
    private createNonModelInputs;
    private isModelField;
    private getNonModelInputObjectName;
    private addAutoGeneratableFields;
    private addModelSyncFields;
    private getSubscriptionToMutationsReverseMap;
    private createModelTable;
    private createModelTableDataSource;
    private createIAMRole;
    private ensureModelSortDirectionEnum;
    private getOptions;
    private ensureValidSubscriptionName;
}
export {};
//# sourceMappingURL=graphql-model-transformer.d.ts.map