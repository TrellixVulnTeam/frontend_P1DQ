"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const amplify_cli_core_1 = require("amplify-cli-core");
const run = async (context) => {
    var _a, _b, _c, _d, _e;
    const cliParams = { cliCommand: (_a = context === null || context === void 0 ? void 0 : context.input) === null || _a === void 0 ? void 0 : _a.command,
        cliSubcommands: (_b = context === null || context === void 0 ? void 0 : context.input) === null || _b === void 0 ? void 0 : _b.subCommands,
        cliOptions: (_c = context === null || context === void 0 ? void 0 : context.input) === null || _c === void 0 ? void 0 : _c.options };
    const view = new amplify_cli_core_1.ViewResourceTableParams(cliParams);
    if ((_e = (_d = context === null || context === void 0 ? void 0 : context.input) === null || _d === void 0 ? void 0 : _d.subCommands) === null || _e === void 0 ? void 0 : _e.includes("help")) {
        context.print.info(view.getStyledHelp());
    }
    else {
        try {
            await context.amplify.showStatusTable(view);
            await context.amplify.showHelpfulProviderLinks(context);
            await showAmplifyConsoleHostingStatus(context);
        }
        catch (e) {
            view.logErrorException(e, context);
        }
    }
};
exports.run = run;
async function showAmplifyConsoleHostingStatus(context) {
    const pluginInfo = context.amplify.getCategoryPluginInfo(context, 'hosting', 'amplifyhosting');
    if (pluginInfo && pluginInfo.packageLocation) {
        const { status } = await Promise.resolve().then(() => __importStar(require(pluginInfo.packageLocation)));
        if (status) {
            await status(context);
        }
    }
}
//# sourceMappingURL=status.js.map