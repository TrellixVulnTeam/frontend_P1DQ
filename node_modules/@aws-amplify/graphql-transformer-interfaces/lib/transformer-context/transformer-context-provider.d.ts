import { TransformerResolversManagerProvider } from './transformer-resolver-provider';
import { TransformerDataSourceManagerProvider } from './transformer-datasource-provider';
import { TransformerProviderRegistry } from './transformer-provider-registry';
import { DocumentNode } from 'graphql';
import { TransformerContextOutputProvider } from './transformer-context-output-provider';
import { StackManagerProvider } from './stack-manager-provider';
import { GraphQLAPIProvider } from '../graphql-api-provider';
import { TransformerResourceProvider } from './resource-resource-provider';
import { FeatureFlagProvider } from '../feature-flag-provider';
export interface TransformerContextProvider {
    resolvers: TransformerResolversManagerProvider;
    dataSources: TransformerDataSourceManagerProvider;
    providerRegistry: TransformerProviderRegistry;
    inputDocument: DocumentNode;
    output: TransformerContextOutputProvider;
    stackManager: StackManagerProvider;
    api: GraphQLAPIProvider;
    resourceHelper: TransformerResourceProvider;
    featureFlags: FeatureFlagProvider;
    isProjectUsingDataStore(): boolean;
    getResolverConfig<ResolverConfig>(): ResolverConfig | undefined;
}
export declare type TransformerBeforeStepContextProvider = Pick<TransformerContextProvider, 'inputDocument' | 'featureFlags'>;
export declare type TransformerSchemaVisitStepContextProvider = Pick<TransformerContextProvider, 'inputDocument' | 'output' | 'providerRegistry' | 'featureFlags' | 'isProjectUsingDataStore' | 'getResolverConfig'>;
export declare type TransformerValidationStepContextProvider = Pick<TransformerContextProvider, 'inputDocument' | 'output' | 'providerRegistry' | 'dataSources' | 'featureFlags' | 'isProjectUsingDataStore' | 'getResolverConfig'>;
export declare type TransformerPrepareStepContextProvider = TransformerValidationStepContextProvider;
export declare type TransformerTransformSchemaStepContextProvider = TransformerValidationStepContextProvider;
//# sourceMappingURL=transformer-context-provider.d.ts.map