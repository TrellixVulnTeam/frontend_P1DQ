"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.responseTemplate = exports.requestTemplate = void 0;
const graphql_mapping_template_1 = require("graphql-mapping-template");
const graphql_transformer_common_1 = require("graphql-transformer-common");
function requestTemplate(primaryKey, nonKeywordFields, includeVersion = false, type) {
    return graphql_mapping_template_1.print(graphql_mapping_template_1.compoundExpression([
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('indexPath'), graphql_mapping_template_1.str(`/${type.toLowerCase()}/doc/_search`)),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('nonKeywordFields'), graphql_mapping_template_1.list(nonKeywordFields)),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('sortValues'), graphql_mapping_template_1.list([])),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('aggregateValues'), graphql_mapping_template_1.obj({})),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('primaryKey'), graphql_mapping_template_1.str(primaryKey)),
        graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('util.isNullOrEmpty($context.args.sort)'), graphql_mapping_template_1.compoundExpression([
            graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('nonKeywordFields.contains($primaryKey)'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('sortField'), graphql_mapping_template_1.ref('util.toJson($primaryKey)')), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('sortField'), graphql_mapping_template_1.ref('util.toJson("${primaryKey}.keyword")'))),
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('sortDirection'), graphql_mapping_template_1.ref('util.toJson({"order": "desc"})')),
            graphql_mapping_template_1.qref('$sortValues.add("{$sortField: $sortDirection}")'),
        ]), graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('sortItem'), graphql_mapping_template_1.ref('context.args.sort'), [
            graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('util.isNullOrEmpty($sortItem.field)'), graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('nonKeywordFields.contains($primaryKey)'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('sortField'), graphql_mapping_template_1.ref('util.toJson($primaryKey)')), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('sortField'), graphql_mapping_template_1.ref('util.toJson("${primaryKey}.keyword")'))), graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('nonKeywordFields.contains($sortItem.field)'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('sortField'), graphql_mapping_template_1.ref('util.toJson($sortItem.field)')), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('sortField'), graphql_mapping_template_1.ref('util.toJson("${sortItem.field}.keyword")')))),
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('sortDirection'), graphql_mapping_template_1.ref('util.toJson({"order": $sortItem.direction})')),
            graphql_mapping_template_1.qref('$sortValues.add("{$sortField: $sortDirection}")'),
        ])),
        graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('aggItem'), graphql_mapping_template_1.ref('context.args.aggregates'), [
            graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('nonKeywordFields.contains($aggItem.field)'), graphql_mapping_template_1.qref('$aggregateValues.put("$aggItem.name", {"$aggItem.type": {"field": "$aggItem.field"}})'), graphql_mapping_template_1.qref('$aggregateValues.put("$aggItem.name", {"$aggItem.type": {"field": "${aggItem.field}.keyword"}})')),
        ]),
        graphql_mapping_template_1.SearchableMappingTemplate.searchTemplate({
            path: graphql_mapping_template_1.str('$indexPath'),
            size: graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('context.args.limit'), graphql_mapping_template_1.ref('context.args.limit'), graphql_mapping_template_1.int(graphql_transformer_common_1.ResourceConstants.DEFAULT_SEARCHABLE_PAGE_LIMIT), true),
            search_after: graphql_mapping_template_1.ref('util.base64Decode($context.args.nextToken)'),
            from: graphql_mapping_template_1.ref('context.args.from'),
            version: graphql_mapping_template_1.bool(includeVersion),
            query: graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('context.args.filter'), graphql_mapping_template_1.ref('util.transform.toElasticsearchQueryDSL($ctx.args.filter)'), graphql_mapping_template_1.obj({
                match_all: graphql_mapping_template_1.obj({}),
            })),
            sort: graphql_mapping_template_1.ref('sortValues'),
            aggs: graphql_mapping_template_1.ref('util.toJson($aggregateValues)'),
        }),
    ]));
}
exports.requestTemplate = requestTemplate;
function responseTemplate(includeVersion = false) {
    return graphql_mapping_template_1.print(graphql_mapping_template_1.compoundExpression([
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('es_items'), graphql_mapping_template_1.list([])),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('aggregateValues'), graphql_mapping_template_1.list([])),
        graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('entry'), graphql_mapping_template_1.ref('context.result.hits.hits'), [
            graphql_mapping_template_1.iff(graphql_mapping_template_1.raw('!$foreach.hasNext'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('nextToken'), graphql_mapping_template_1.ref('util.base64Encode($util.toJson($entry.sort))'))),
            ...getSourceMapper(includeVersion),
        ]),
        graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('aggItem'), graphql_mapping_template_1.ref('context.result.aggregations.keySet()'), [
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('aggResult'), graphql_mapping_template_1.obj({})),
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('aggResultValue'), graphql_mapping_template_1.obj({})),
            graphql_mapping_template_1.qref('$aggResult.put("name", $aggItem)'),
            graphql_mapping_template_1.iff(graphql_mapping_template_1.raw('!$util.isNullOrEmpty($context.result.aggregations)'), graphql_mapping_template_1.compoundExpression([
                graphql_mapping_template_1.iff(graphql_mapping_template_1.raw('!$util.isNullOrEmpty($context.result.aggregations.get($aggItem).buckets)'), graphql_mapping_template_1.compoundExpression([
                    graphql_mapping_template_1.qref('$aggResultValue.put("__typename", "SearchableAggregateBucketResult")'),
                    graphql_mapping_template_1.qref('$aggResultValue.put("buckets", $context.result.aggregations.get($aggItem).buckets)'),
                ])),
                graphql_mapping_template_1.iff(graphql_mapping_template_1.raw('!$util.isNullOrEmpty($context.result.aggregations.get($aggItem).value)'), graphql_mapping_template_1.compoundExpression([
                    graphql_mapping_template_1.qref('$aggResultValue.put("__typename", "SearchableAggregateScalarResult")'),
                    graphql_mapping_template_1.qref('$aggResultValue.put("value", $context.result.aggregations.get($aggItem).value)'),
                ])),
            ])),
            graphql_mapping_template_1.qref('$aggResult.put("result", $aggResultValue)'),
            graphql_mapping_template_1.qref('$aggregateValues.add($aggResult)'),
        ]),
        graphql_mapping_template_1.toJson(graphql_mapping_template_1.obj({
            items: graphql_mapping_template_1.ref('es_items'),
            total: graphql_mapping_template_1.ref('ctx.result.hits.total.value'),
            nextToken: graphql_mapping_template_1.ref('nextToken'),
            aggregateItems: graphql_mapping_template_1.ref('aggregateValues'),
        })),
    ]));
}
exports.responseTemplate = responseTemplate;
function getSourceMapper(includeVersion) {
    if (includeVersion) {
        return [
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('row'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('entry.get'), graphql_mapping_template_1.str('_source'))),
            graphql_mapping_template_1.qref('$row.put("_version", $entry.get("_version"))'),
            graphql_mapping_template_1.qref('$es_items.add($row)'),
        ];
    }
    return [graphql_mapping_template_1.qref('$es_items.add($entry.get("_source"))')];
}
//# sourceMappingURL=generate-resolver-vtl.js.map