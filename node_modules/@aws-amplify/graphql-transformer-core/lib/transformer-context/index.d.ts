import { FeatureFlagProvider, GraphQLAPIProvider, StackManagerProvider, TransformerContextOutputProvider, TransformerContextProvider, TransformerDataSourceManagerProvider } from '@aws-amplify/graphql-transformer-interfaces';
import { App } from '@aws-cdk/core';
import { DocumentNode } from 'graphql';
import { ResolverConfig } from '../config/transformer-config';
import { TransformerContextProviderRegistry } from './provider-registry';
import { ResolverManager } from './resolver';
import { TransformerResourceHelper } from './resource-helper';
export declare class TransformerContext implements TransformerContextProvider {
    readonly inputDocument: DocumentNode;
    readonly output: TransformerContextOutputProvider;
    readonly resolvers: ResolverManager;
    readonly dataSources: TransformerDataSourceManagerProvider;
    readonly providerRegistry: TransformerContextProviderRegistry;
    readonly stackManager: StackManagerProvider;
    readonly resourceHelper: TransformerResourceHelper;
    readonly featureFlags: FeatureFlagProvider;
    _api?: GraphQLAPIProvider;
    private resolverConfig;
    constructor(app: App, inputDocument: DocumentNode, stackMapping: Record<string, string>, featureFlags?: FeatureFlagProvider, resolverConfig?: ResolverConfig);
    get api(): GraphQLAPIProvider;
    getResolverConfig: <ResolverConfig_1>() => ResolverConfig_1 | undefined;
    isProjectUsingDataStore(): boolean;
}
//# sourceMappingURL=index.d.ts.map