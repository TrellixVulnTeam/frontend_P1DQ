export interface TransformMigrationConfig {
    V1?: {
        Resources: string[];
    };
}
export declare type AppSyncAuthMode = 'API_KEY' | 'AMAZON_COGNITO_USER_POOLS' | 'AWS_IAM' | 'OPENID_CONNECT';
export declare type AppSyncAuthConfiguration = {
    defaultAuthentication: AppSyncAuthConfigurationEntry;
    additionalAuthenticationProviders: Array<AppSyncAuthConfigurationEntry>;
};
export declare type AppSyncAuthConfigurationEntry = AppSyncAuthConfigurationUserPoolEntry | AppSyncAuthConfigurationAPIKeyEntry | AppSyncAuthConfigurationIAMEntry | AppSyncAuthConfigurationOIDCEntry;
export declare type AppSyncAuthConfigurationAPIKeyEntry = {
    authenticationType: 'API_KEY';
    apiKeyConfig: ApiKeyConfig;
};
export declare type AppSyncAuthConfigurationUserPoolEntry = {
    authenticationType: 'AMAZON_COGNITO_USER_POOLS';
    userPoolConfig: UserPoolConfig;
};
export declare type AppSyncAuthConfigurationIAMEntry = {
    authenticationType: 'AWS_IAM';
};
export declare type AppSyncAuthConfigurationOIDCEntry = {
    authenticationType: 'OPENID_CONNECT';
    openIDConnectConfig: OpenIDConnectConfig;
};
export declare type ApiKeyConfig = {
    description?: string;
    apiKeyExpirationDays: number;
};
export declare type UserPoolConfig = {
    userPoolId: string;
};
export declare type OpenIDConnectConfig = {
    name: string;
    issuerUrl: string;
    clientId?: string;
    iatTTL?: number;
    authTTL?: number;
};
export declare const enum ConflictHandlerType {
    OPTIMISTIC = "OPTIMISTIC_CONCURRENCY",
    AUTOMERGE = "AUTOMERGE",
    LAMBDA = "LAMBDA"
}
export declare type ConflictDetectionType = 'VERSION' | 'NONE';
export declare type SyncConfigOptimistic = {
    ConflictDetection: ConflictDetectionType;
    ConflictHandler: ConflictHandlerType.OPTIMISTIC;
};
export declare type SyncConfigServer = {
    ConflictDetection: ConflictDetectionType;
    ConflictHandler: ConflictHandlerType.AUTOMERGE;
};
export declare type SyncConfigLambda = {
    ConflictDetection: ConflictDetectionType;
    ConflictHandler: ConflictHandlerType.LAMBDA;
    LambdaConflictHandler: LambdaConflictHandler;
};
export declare type LambdaConflictHandler = {
    name: string;
    region?: string;
    lambdaArn?: any;
};
export declare type SyncConfig = SyncConfigOptimistic | SyncConfigServer | SyncConfigLambda;
export declare type ResolverConfig = {
    project?: SyncConfig;
    models?: Record<string, SyncConfig>;
};
export interface TransformConfig {
    StackMapping?: Record<string, string>;
    TransformerOptions?: {
        [transformer: string]: Record<string, any>;
    };
    ResolverConfig?: ResolverConfig;
}
//# sourceMappingURL=transformer-config.d.ts.map