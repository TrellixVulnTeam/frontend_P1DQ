"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BelongsToTransformer = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const graphql_transformer_common_1 = require("graphql-transformer-common");
const resolvers_1 = require("./resolvers");
const schema_1 = require("./schema");
const utils_1 = require("./utils");
const directiveName = 'belongsTo';
const directiveDefinition = `
  directive @${directiveName}(fields: [String!]) on FIELD_DEFINITION
`;
class BelongsToTransformer extends graphql_transformer_core_1.TransformerPluginBase {
    constructor() {
        super('amplify-belongs-to-transformer', directiveDefinition);
        this.directiveList = [];
        this.field = (parent, definition, directive, context) => {
            const directiveWrapped = new graphql_transformer_core_1.DirectiveWrapper(directive);
            const args = directiveWrapped.getArguments({
                directiveName,
                object: parent,
                field: definition,
                directive,
            });
            validate(args, context);
            this.directiveList.push(args);
        };
        this.transformSchema = (ctx) => {
            const context = ctx;
            for (const config of this.directiveList) {
                config.relatedTypeIndex = utils_1.getRelatedTypeIndex(config, context);
                schema_1.ensureHasOneConnectionField(config, context);
            }
        };
        this.generateResolvers = (ctx) => {
            const context = ctx;
            for (const config of this.directiveList) {
                resolvers_1.makeGetItemConnectionWithKeyResolver(config, context);
            }
        };
    }
}
exports.BelongsToTransformer = BelongsToTransformer;
function validate(config, ctx) {
    const { field, object } = config;
    utils_1.ensureFieldsArray(config);
    utils_1.validateModelDirective(config);
    if (graphql_transformer_common_1.isListType(field.type)) {
        throw new graphql_transformer_core_1.InvalidDirectiveError(`@${directiveName} cannot be used with lists.`);
    }
    config.fieldNodes = utils_1.getFieldsNodes(config, ctx);
    config.relatedType = utils_1.getRelatedType(config, ctx);
    config.connectionFields = [];
    utils_1.validateRelatedModelDirective(config);
    const isBidiRelation = config.relatedType.fields.some(relatedField => {
        if (graphql_transformer_common_1.getBaseType(relatedField.type) !== object.name.value) {
            return false;
        }
        return relatedField.directives.some(relatedDirective => {
            return relatedDirective.name.value === 'hasOne' || relatedDirective.name.value === 'hasMany';
        });
    });
    if (!isBidiRelation) {
        throw new graphql_transformer_core_1.InvalidDirectiveError(`${config.relatedType.name.value} must have a relationship with ${object.name.value} in order to use @${directiveName}.`);
    }
}
//# sourceMappingURL=graphql-belongs-to-transformer.js.map