"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HasOneTransformer = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const graphql_transformer_common_1 = require("graphql-transformer-common");
const resolvers_1 = require("./resolvers");
const schema_1 = require("./schema");
const utils_1 = require("./utils");
const directiveName = 'hasOne';
const directiveDefinition = `
  directive @${directiveName}(fields: [String!]) on FIELD_DEFINITION
`;
class HasOneTransformer extends graphql_transformer_core_1.TransformerPluginBase {
    constructor() {
        super('amplify-has-one-transformer', directiveDefinition);
        this.directiveList = [];
        this.field = (parent, definition, directive, context) => {
            const directiveWrapped = new graphql_transformer_core_1.DirectiveWrapper(directive);
            const args = directiveWrapped.getArguments({
                directiveName,
                object: parent,
                field: definition,
                directive,
            });
            validate(args, context);
            this.directiveList.push(args);
        };
        this.transformSchema = (ctx) => {
            const context = ctx;
            for (const config of this.directiveList) {
                config.relatedTypeIndex = utils_1.getRelatedTypeIndex(config, context);
                schema_1.ensureHasOneConnectionField(config, context);
            }
        };
        this.generateResolvers = (ctx) => {
            const context = ctx;
            for (const config of this.directiveList) {
                resolvers_1.makeGetItemConnectionWithKeyResolver(config, context);
            }
        };
    }
}
exports.HasOneTransformer = HasOneTransformer;
function validate(config, ctx) {
    const { field } = config;
    utils_1.ensureFieldsArray(config);
    utils_1.validateModelDirective(config);
    if (graphql_transformer_common_1.isListType(field.type)) {
        throw new graphql_transformer_core_1.InvalidDirectiveError(`@${directiveName} cannot be used with lists. Use @hasMany instead.`);
    }
    config.fieldNodes = utils_1.getFieldsNodes(config, ctx);
    config.relatedType = utils_1.getRelatedType(config, ctx);
    config.connectionFields = [];
    utils_1.validateRelatedModelDirective(config);
}
//# sourceMappingURL=graphql-has-one-transformer.js.map