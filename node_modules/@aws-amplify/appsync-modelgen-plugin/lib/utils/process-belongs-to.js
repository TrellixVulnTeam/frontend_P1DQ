"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processBelongsToConnection = void 0;
const process_connections_1 = require("./process-connections");
const process_connections_v2_1 = require("./process-connections-v2");
function processBelongsToConnection(field, model, modelMap, connectionDirective) {
    const otherSide = modelMap[field.type];
    const otherSideField = process_connections_v2_1.getConnectedFieldV2(field, model, otherSide, connectionDirective.name);
    const connectionFields = connectionDirective.arguments.fields || [];
    if (connectionFields.length > 1) {
        throw new Error('DataStore only support one key in field');
    }
    if (field.isList) {
        throw new Error(`A list field does not support the 'belongsTo' relation`);
    }
    else if (field.isNullable && otherSideField.isNullable) {
        throw new Error(`DataStore does not support 1 to 1 connection with both sides of connection as optional field: ${model.name}.${field.name}`);
    }
    let validOtherSideField = false;
    otherSideField.directives.forEach(dir => {
        if (dir.name === 'hasOne' || dir.name === 'hasMany') {
            validOtherSideField = true;
        }
    });
    if (!validOtherSideField) {
        throw new Error(`A 'belongsTo' field should match to a corresponding 'hasMany' or 'hasOne' field`);
    }
    const isConnectingFieldAutoCreated = connectionFields.length === 0;
    return {
        kind: process_connections_1.CodeGenConnectionType.BELONGS_TO,
        connectedModel: otherSide,
        isConnectingFieldAutoCreated,
        targetName: connectionFields[0] || process_connections_1.makeConnectionAttributeName(model.name, field.name),
    };
}
exports.processBelongsToConnection = processBelongsToConnection;
//# sourceMappingURL=process-belongs-to.js.map