"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateConfigOnEnvInit = exports.getPermissionPolicies = exports.migrateResource = exports.updateResource = exports.addResource = exports.importResource = void 0;
const amplify_cli_core_1 = require("amplify-cli-core");
const amplify_prompts_1 = require("amplify-prompts");
const lodash_1 = __importDefault(require("lodash"));
const import_dynamodb_1 = require("./import/import-dynamodb");
const import_s3_1 = require("./import/import-s3");
var import_1 = require("./import");
Object.defineProperty(exports, "importResource", { enumerable: true, get: function () { return import_1.importResource; } });
async function addResource(context, category, service, options) {
    const serviceMetadata = (await Promise.resolve().then(() => __importStar(require('../supported-services')))).supportedServices[service];
    const { defaultValuesFilename, serviceWalkthroughFilename } = serviceMetadata;
    const serviceWalkthroughSrc = `${__dirname}/service-walkthroughs/${serviceWalkthroughFilename}`;
    const { addWalkthrough } = await Promise.resolve().then(() => __importStar(require(serviceWalkthroughSrc)));
    return addWalkthrough(context, defaultValuesFilename, serviceMetadata, options).then(async (resourceName) => {
        context.amplify.updateamplifyMetaAfterResourceAdd(category, resourceName, options);
        return resourceName;
    });
}
exports.addResource = addResource;
async function updateResource(context, category, service) {
    const serviceMetadata = (await Promise.resolve().then(() => __importStar(require('../supported-services')))).supportedServices[service];
    const { defaultValuesFilename, serviceWalkthroughFilename } = serviceMetadata;
    const serviceWalkthroughSrc = `${__dirname}/service-walkthroughs/${serviceWalkthroughFilename}`;
    const { updateWalkthrough } = await Promise.resolve().then(() => __importStar(require(serviceWalkthroughSrc)));
    if (!updateWalkthrough) {
        const errMessage = 'Update functionality not available for this service';
        amplify_prompts_1.printer.error(errMessage);
        await context.usageData.emitError(new amplify_cli_core_1.NotImplementedError(errMessage));
        amplify_cli_core_1.exitOnNextTick(0);
    }
    return updateWalkthrough(context, defaultValuesFilename, serviceMetadata);
}
exports.updateResource = updateResource;
async function migrateResource(context, projectPath, service, resourceName) {
    const serviceMetadata = (await Promise.resolve().then(() => __importStar(require('../supported-services')))).supportedServices[service];
    const { serviceWalkthroughFilename } = serviceMetadata;
    const serviceWalkthroughSrc = `${__dirname}/service-walkthroughs/${serviceWalkthroughFilename}`;
    const { migrate } = await Promise.resolve().then(() => __importStar(require(serviceWalkthroughSrc)));
    if (!migrate) {
        amplify_prompts_1.printer.info(`No migration required for ${resourceName}`);
        return;
    }
    return migrate(context, projectPath, resourceName);
}
exports.migrateResource = migrateResource;
async function getPermissionPolicies(service, resourceName, crudOptions) {
    const serviceMetadata = (await Promise.resolve().then(() => __importStar(require('../supported-services')))).supportedServices[service];
    const { serviceWalkthroughFilename } = serviceMetadata;
    const serviceWalkthroughSrc = `${__dirname}/service-walkthroughs/${serviceWalkthroughFilename}`;
    const { getIAMPolicies } = await Promise.resolve().then(() => __importStar(require(serviceWalkthroughSrc)));
    return getIAMPolicies(resourceName, crudOptions);
}
exports.getPermissionPolicies = getPermissionPolicies;
async function updateConfigOnEnvInit(context, category, resourceName, service) {
    const serviceMetadata = (await Promise.resolve().then(() => __importStar(require('../supported-services')))).supportedServices[service];
    const { provider } = serviceMetadata;
    const providerPlugin = context.amplify.getPluginInstance(context, provider);
    const resourceParams = providerPlugin.loadResourceParameters(context, category, resourceName);
    let currentEnvSpecificValues = context.amplify.loadEnvResourceParameters(context, category, resourceName);
    const resource = lodash_1.default.get(context.exeInfo, ['amplifyMeta', category, resourceName]);
    if (resource && resource.serviceType === 'imported') {
        let envSpecificParametersResult;
        const envInitFunction = service === 'S3' ? import_s3_1.importedS3EnvInit : import_dynamodb_1.importedDynamoDBEnvInit;
        const { doServiceWalkthrough, succeeded, envSpecificParameters } = await envInitFunction(context, resourceName, resource, resourceParams, provider, providerPlugin, currentEnvSpecificValues, isInHeadlessMode(context), isInHeadlessMode(context) ? getHeadlessParams(context) : {});
        if (doServiceWalkthrough === true) {
            const importFunction = service === 'S3' ? import_s3_1.importS3 : import_dynamodb_1.importDynamoDB;
            const importResult = await importFunction(context, {
                providerName: provider,
                provider: undefined,
                service,
            }, resourceParams, providerPlugin, false);
            if (importResult) {
                envSpecificParametersResult = importResult.envSpecificParameters;
            }
            else {
                throw new Error('There was an error importing the previously configured storage configuration to the new environment.');
            }
        }
        else if (succeeded) {
            envSpecificParametersResult = envSpecificParameters;
        }
        else {
            throw new Error('There was an error importing the previously configured storage configuration to the new environment.');
        }
        const currentMeta = amplify_cli_core_1.stateManager.getCurrentMeta(undefined, {
            throwIfNotExist: false,
        });
        if (currentMeta) {
            const meta = amplify_cli_core_1.stateManager.getMeta(undefined, {
                throwIfNotExist: false,
            });
            const cloudTimestamp = lodash_1.default.get(currentMeta, [category, resourceName, 'lastPushTimeStamp'], undefined);
            if (cloudTimestamp) {
                resource.lastPushTimeStamp = cloudTimestamp;
            }
            else {
                resource.lastPushTimeStamp = new Date();
            }
            lodash_1.default.set(meta, [category, resourceName, 'lastPushTimeStamp'], cloudTimestamp);
            amplify_cli_core_1.stateManager.setMeta(undefined, meta);
        }
        return envSpecificParametersResult;
    }
}
exports.updateConfigOnEnvInit = updateConfigOnEnvInit;
function isInHeadlessMode(context) {
    return context.exeInfo.inputParams.yes;
}
function getHeadlessParams(context) {
    const { inputParams } = context.exeInfo;
    try {
        const { categories = {} } = typeof inputParams === 'string' ? amplify_cli_core_1.JSONUtilities.parse(inputParams) : inputParams;
        return categories.storage || {};
    }
    catch (err) {
        throw new Error(`Failed to parse storage headless parameters: ${err}`);
    }
}
//# sourceMappingURL=index.js.map