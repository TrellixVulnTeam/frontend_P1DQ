"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExistingTableColumnNames = exports.getExistingStorageAttributeDefinitions = exports.getExistingStorageGSIs = exports.getCloudFormationTemplatePath = void 0;
const amplify_cli_core_1 = require("amplify-cli-core");
const lodash_1 = __importDefault(require("lodash"));
const path = __importStar(require("path"));
const category = 'storage';
const getCloudFormationTemplatePath = (resourceName) => {
    return path.join(amplify_cli_core_1.pathManager.getBackendDirPath(), category, resourceName, `${resourceName}-cloudformation-template.json`);
};
exports.getCloudFormationTemplatePath = getCloudFormationTemplatePath;
const getExistingStorageGSIs = async (resourceName) => {
    var _a, _b;
    return ((_b = (_a = (await loadTable(resourceName))) === null || _a === void 0 ? void 0 : _a.Properties) === null || _b === void 0 ? void 0 : _b.GlobalSecondaryIndexes) || [];
};
exports.getExistingStorageGSIs = getExistingStorageGSIs;
const getExistingStorageAttributeDefinitions = async (resourceName) => {
    var _a, _b;
    return ((_b = (_a = (await loadTable(resourceName))) === null || _a === void 0 ? void 0 : _a.Properties) === null || _b === void 0 ? void 0 : _b.AttributeDefinitions) || [];
};
exports.getExistingStorageAttributeDefinitions = getExistingStorageAttributeDefinitions;
const getExistingTableColumnNames = async (resourceName) => {
    return (await exports.getExistingStorageAttributeDefinitions(resourceName)).map(att => att.AttributeName.toString());
};
exports.getExistingTableColumnNames = getExistingTableColumnNames;
const loadTable = async (resourceName) => {
    const table = getTableFromTemplate(await loadCfnTemplateSafe(resourceName));
    return table;
};
const loadCfnTemplateSafe = async (resourceName) => {
    if (!resourceName) {
        return undefined;
    }
    const { cfnTemplate } = (await amplify_cli_core_1.readCFNTemplate(exports.getCloudFormationTemplatePath(resourceName), { throwIfNotExist: false })) || {};
    return cfnTemplate;
};
const getTableFromTemplate = (cfnTemplate) => {
    if (lodash_1.default.isEmpty(cfnTemplate === null || cfnTemplate === void 0 ? void 0 : cfnTemplate.Resources)) {
        return undefined;
    }
    const cfnTable = Object.values(cfnTemplate.Resources).find(resource => resource.Type === 'AWS::DynamoDB::Table');
    return cfnTable;
};
//# sourceMappingURL=cfn-template-utils.js.map