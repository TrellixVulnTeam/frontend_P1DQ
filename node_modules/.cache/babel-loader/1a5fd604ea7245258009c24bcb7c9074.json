{"ast":null,"code":"'use strict';\n\nvar assert = require('assert');\n\nvar map = require('arr-map');\n\nvar flatten = require('arr-flatten');\n\nvar levenshtein = require('fast-levenshtein');\n\nfunction normalizeArgs(registry, args) {\n  function getFunction(task) {\n    if (typeof task === 'function') {\n      return task;\n    }\n\n    var fn = registry.get(task);\n\n    if (!fn) {\n      var similar = similarTasks(registry, task);\n\n      if (similar.length > 0) {\n        assert(false, 'Task never defined: ' + task + ' - did you mean? ' + similar.join(', '));\n      } else {\n        assert(false, 'Task never defined: ' + task);\n      }\n    }\n\n    return fn;\n  }\n\n  var flattenArgs = flatten(args);\n  assert(flattenArgs.length, 'One or more tasks should be combined using series or parallel');\n  return map(flattenArgs, getFunction);\n}\n\nfunction similarTasks(registry, queryTask) {\n  if (typeof queryTask !== 'string') {\n    return [];\n  }\n\n  var tasks = registry.tasks();\n  var similarTasks = [];\n\n  for (var task in tasks) {\n    if (tasks.hasOwnProperty(task)) {\n      var distance = levenshtein.get(task, queryTask);\n      var allowedDistance = Math.floor(0.4 * task.length) + 1;\n\n      if (distance < allowedDistance) {\n        similarTasks.push(task);\n      }\n    }\n  }\n\n  return similarTasks;\n}\n\nmodule.exports = normalizeArgs;","map":{"version":3,"sources":["C:/frontend/node_modules/undertaker/lib/helpers/normalizeArgs.js"],"names":["assert","require","map","flatten","levenshtein","normalizeArgs","registry","args","getFunction","task","fn","get","similar","similarTasks","length","join","flattenArgs","queryTask","tasks","hasOwnProperty","distance","allowedDistance","Math","floor","push","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,IAAIC,GAAG,GAAGD,OAAO,CAAC,SAAD,CAAjB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAD,CAArB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AAEA,SAASI,aAAT,CAAuBC,QAAvB,EAAiCC,IAAjC,EAAuC;AACrC,WAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,QAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC9B,aAAOA,IAAP;AACD;;AAED,QAAIC,EAAE,GAAGJ,QAAQ,CAACK,GAAT,CAAaF,IAAb,CAAT;;AACA,QAAI,CAACC,EAAL,EAAS;AACP,UAAIE,OAAO,GAAGC,YAAY,CAACP,QAAD,EAAWG,IAAX,CAA1B;;AACA,UAAIG,OAAO,CAACE,MAAR,GAAiB,CAArB,EAAwB;AACtBd,QAAAA,MAAM,CAAC,KAAD,EAAQ,yBAAyBS,IAAzB,GAAgC,mBAAhC,GAAsDG,OAAO,CAACG,IAAR,CAAa,IAAb,CAA9D,CAAN;AACD,OAFD,MAEO;AACLf,QAAAA,MAAM,CAAC,KAAD,EAAQ,yBAAyBS,IAAjC,CAAN;AACD;AACF;;AACD,WAAOC,EAAP;AACD;;AAED,MAAIM,WAAW,GAAGb,OAAO,CAACI,IAAD,CAAzB;AACAP,EAAAA,MAAM,CAACgB,WAAW,CAACF,MAAb,EAAqB,+DAArB,CAAN;AAEA,SAAOZ,GAAG,CAACc,WAAD,EAAcR,WAAd,CAAV;AACD;;AAED,SAASK,YAAT,CAAsBP,QAAtB,EAAgCW,SAAhC,EAA2C;AACzC,MAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,WAAO,EAAP;AACD;;AAED,MAAIC,KAAK,GAAGZ,QAAQ,CAACY,KAAT,EAAZ;AACA,MAAIL,YAAY,GAAG,EAAnB;;AACA,OAAK,IAAIJ,IAAT,IAAiBS,KAAjB,EAAwB;AACtB,QAAIA,KAAK,CAACC,cAAN,CAAqBV,IAArB,CAAJ,EAAgC;AAC9B,UAAIW,QAAQ,GAAGhB,WAAW,CAACO,GAAZ,CAAgBF,IAAhB,EAAsBQ,SAAtB,CAAf;AACA,UAAII,eAAe,GAAGC,IAAI,CAACC,KAAL,CAAW,MAAMd,IAAI,CAACK,MAAtB,IAAgC,CAAtD;;AACA,UAAIM,QAAQ,GAAGC,eAAf,EAAgC;AAC9BR,QAAAA,YAAY,CAACW,IAAb,CAAkBf,IAAlB;AACD;AACF;AACF;;AACD,SAAOI,YAAP;AACD;;AAEDY,MAAM,CAACC,OAAP,GAAiBrB,aAAjB","sourcesContent":["'use strict';\r\n\r\nvar assert = require('assert');\r\n\r\nvar map = require('arr-map');\r\nvar flatten = require('arr-flatten');\r\nvar levenshtein = require('fast-levenshtein');\r\n\r\nfunction normalizeArgs(registry, args) {\r\n  function getFunction(task) {\r\n    if (typeof task === 'function') {\r\n      return task;\r\n    }\r\n\r\n    var fn = registry.get(task);\r\n    if (!fn) {\r\n      var similar = similarTasks(registry, task);\r\n      if (similar.length > 0) {\r\n        assert(false, 'Task never defined: ' + task + ' - did you mean? ' + similar.join(', '));\r\n      } else {\r\n        assert(false, 'Task never defined: ' + task);\r\n      }\r\n    }\r\n    return fn;\r\n  }\r\n\r\n  var flattenArgs = flatten(args);\r\n  assert(flattenArgs.length, 'One or more tasks should be combined using series or parallel');\r\n\r\n  return map(flattenArgs, getFunction);\r\n}\r\n\r\nfunction similarTasks(registry, queryTask) {\r\n  if (typeof queryTask !== 'string') {\r\n    return [];\r\n  }\r\n\r\n  var tasks = registry.tasks();\r\n  var similarTasks = [];\r\n  for (var task in tasks) {\r\n    if (tasks.hasOwnProperty(task)) {\r\n      var distance = levenshtein.get(task, queryTask);\r\n      var allowedDistance = Math.floor(0.4 * task.length) + 1;\r\n      if (distance < allowedDistance) {\r\n        similarTasks.push(task);\r\n      }\r\n    }\r\n  }\r\n  return similarTasks;\r\n}\r\n\r\nmodule.exports = normalizeArgs;\r\n"]},"metadata":{},"sourceType":"script"}