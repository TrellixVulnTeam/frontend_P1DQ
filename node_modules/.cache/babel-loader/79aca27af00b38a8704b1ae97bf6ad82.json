{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar isNegated = require('is-negated-glob');\n\nvar isAbsolute = require('is-absolute');\n\nmodule.exports = function (glob, options) {\n  // default options\n  var opts = options || {}; // ensure cwd is absolute\n\n  var cwd = path.resolve(opts.cwd ? opts.cwd : process.cwd());\n  cwd = unixify(cwd);\n  var rootDir = opts.root; // if `options.root` is defined, ensure it's absolute\n\n  if (rootDir) {\n    rootDir = unixify(rootDir);\n\n    if (process.platform === 'win32' || !isAbsolute(rootDir)) {\n      rootDir = unixify(path.resolve(rootDir));\n    }\n  } // trim starting ./ from glob patterns\n\n\n  if (glob.slice(0, 2) === './') {\n    glob = glob.slice(2);\n  } // when the glob pattern is only a . use an empty string\n\n\n  if (glob.length === 1 && glob === '.') {\n    glob = '';\n  } // store last character before glob is modified\n\n\n  var suffix = glob.slice(-1); // check to see if glob is negated (and not a leading negated-extglob)\n\n  var ing = isNegated(glob);\n  glob = ing.pattern; // make glob absolute\n\n  if (rootDir && glob.charAt(0) === '/') {\n    glob = join(rootDir, glob);\n  } else if (!isAbsolute(glob) || glob.slice(0, 1) === '\\\\') {\n    glob = join(cwd, glob);\n  } // if glob had a trailing `/`, re-add it now in case it was removed\n\n\n  if (suffix === '/' && glob.slice(-1) !== '/') {\n    glob += '/';\n  } // re-add leading `!` if it was removed\n\n\n  return ing.negated ? '!' + glob : glob;\n};\n\nfunction unixify(filepath) {\n  return filepath.replace(/\\\\/g, '/');\n}\n\nfunction join(dir, glob) {\n  if (dir.charAt(dir.length - 1) === '/') {\n    dir = dir.slice(0, -1);\n  }\n\n  if (glob.charAt(0) === '/') {\n    glob = glob.slice(1);\n  }\n\n  if (!glob) return dir;\n  return dir + '/' + glob;\n}","map":{"version":3,"sources":["C:/frontend/node_modules/to-absolute-glob/index.js"],"names":["path","require","isNegated","isAbsolute","module","exports","glob","options","opts","cwd","resolve","process","unixify","rootDir","root","platform","slice","length","suffix","ing","pattern","charAt","join","negated","filepath","replace","dir"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,iBAAD,CAAvB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,aAAD,CAAxB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAeC,OAAf,EAAwB;AACvC;AACA,MAAIC,IAAI,GAAGD,OAAO,IAAI,EAAtB,CAFuC,CAIvC;;AACA,MAAIE,GAAG,GAAGT,IAAI,CAACU,OAAL,CAAaF,IAAI,CAACC,GAAL,GAAWD,IAAI,CAACC,GAAhB,GAAsBE,OAAO,CAACF,GAAR,EAAnC,CAAV;AACAA,EAAAA,GAAG,GAAGG,OAAO,CAACH,GAAD,CAAb;AAEA,MAAII,OAAO,GAAGL,IAAI,CAACM,IAAnB,CARuC,CASvC;;AACA,MAAID,OAAJ,EAAa;AACXA,IAAAA,OAAO,GAAGD,OAAO,CAACC,OAAD,CAAjB;;AACA,QAAIF,OAAO,CAACI,QAAR,KAAqB,OAArB,IAAgC,CAACZ,UAAU,CAACU,OAAD,CAA/C,EAA0D;AACxDA,MAAAA,OAAO,GAAGD,OAAO,CAACZ,IAAI,CAACU,OAAL,CAAaG,OAAb,CAAD,CAAjB;AACD;AACF,GAfsC,CAiBvC;;;AACA,MAAIP,IAAI,CAACU,KAAL,CAAW,CAAX,EAAc,CAAd,MAAqB,IAAzB,EAA+B;AAC7BV,IAAAA,IAAI,GAAGA,IAAI,CAACU,KAAL,CAAW,CAAX,CAAP;AACD,GApBsC,CAsBvC;;;AACA,MAAIV,IAAI,CAACW,MAAL,KAAgB,CAAhB,IAAqBX,IAAI,KAAK,GAAlC,EAAuC;AACrCA,IAAAA,IAAI,GAAG,EAAP;AACD,GAzBsC,CA2BvC;;;AACA,MAAIY,MAAM,GAAGZ,IAAI,CAACU,KAAL,CAAW,CAAC,CAAZ,CAAb,CA5BuC,CA8BvC;;AACA,MAAIG,GAAG,GAAGjB,SAAS,CAACI,IAAD,CAAnB;AACAA,EAAAA,IAAI,GAAGa,GAAG,CAACC,OAAX,CAhCuC,CAkCvC;;AACA,MAAIP,OAAO,IAAIP,IAAI,CAACe,MAAL,CAAY,CAAZ,MAAmB,GAAlC,EAAuC;AACrCf,IAAAA,IAAI,GAAGgB,IAAI,CAACT,OAAD,EAAUP,IAAV,CAAX;AACD,GAFD,MAEO,IAAI,CAACH,UAAU,CAACG,IAAD,CAAX,IAAqBA,IAAI,CAACU,KAAL,CAAW,CAAX,EAAc,CAAd,MAAqB,IAA9C,EAAoD;AACzDV,IAAAA,IAAI,GAAGgB,IAAI,CAACb,GAAD,EAAMH,IAAN,CAAX;AACD,GAvCsC,CAyCvC;;;AACA,MAAIY,MAAM,KAAK,GAAX,IAAkBZ,IAAI,CAACU,KAAL,CAAW,CAAC,CAAZ,MAAmB,GAAzC,EAA8C;AAC5CV,IAAAA,IAAI,IAAI,GAAR;AACD,GA5CsC,CA8CvC;;;AACA,SAAOa,GAAG,CAACI,OAAJ,GAAc,MAAMjB,IAApB,GAA2BA,IAAlC;AACD,CAhDD;;AAkDA,SAASM,OAAT,CAAiBY,QAAjB,EAA2B;AACzB,SAAOA,QAAQ,CAACC,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,CAAP;AACD;;AAED,SAASH,IAAT,CAAcI,GAAd,EAAmBpB,IAAnB,EAAyB;AACvB,MAAIoB,GAAG,CAACL,MAAJ,CAAWK,GAAG,CAACT,MAAJ,GAAa,CAAxB,MAA+B,GAAnC,EAAwC;AACtCS,IAAAA,GAAG,GAAGA,GAAG,CAACV,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAN;AACD;;AACD,MAAIV,IAAI,CAACe,MAAL,CAAY,CAAZ,MAAmB,GAAvB,EAA4B;AAC1Bf,IAAAA,IAAI,GAAGA,IAAI,CAACU,KAAL,CAAW,CAAX,CAAP;AACD;;AACD,MAAI,CAACV,IAAL,EAAW,OAAOoB,GAAP;AACX,SAAOA,GAAG,GAAG,GAAN,GAAYpB,IAAnB;AACD","sourcesContent":["'use strict';\r\n\r\nvar path = require('path');\r\nvar isNegated = require('is-negated-glob');\r\nvar isAbsolute = require('is-absolute');\r\n\r\nmodule.exports = function(glob, options) {\r\n  // default options\r\n  var opts = options || {};\r\n\r\n  // ensure cwd is absolute\r\n  var cwd = path.resolve(opts.cwd ? opts.cwd : process.cwd());\r\n  cwd = unixify(cwd);\r\n\r\n  var rootDir = opts.root;\r\n  // if `options.root` is defined, ensure it's absolute\r\n  if (rootDir) {\r\n    rootDir = unixify(rootDir);\r\n    if (process.platform === 'win32' || !isAbsolute(rootDir)) {\r\n      rootDir = unixify(path.resolve(rootDir));\r\n    }\r\n  }\r\n\r\n  // trim starting ./ from glob patterns\r\n  if (glob.slice(0, 2) === './') {\r\n    glob = glob.slice(2);\r\n  }\r\n\r\n  // when the glob pattern is only a . use an empty string\r\n  if (glob.length === 1 && glob === '.') {\r\n    glob = '';\r\n  }\r\n\r\n  // store last character before glob is modified\r\n  var suffix = glob.slice(-1);\r\n\r\n  // check to see if glob is negated (and not a leading negated-extglob)\r\n  var ing = isNegated(glob);\r\n  glob = ing.pattern;\r\n\r\n  // make glob absolute\r\n  if (rootDir && glob.charAt(0) === '/') {\r\n    glob = join(rootDir, glob);\r\n  } else if (!isAbsolute(glob) || glob.slice(0, 1) === '\\\\') {\r\n    glob = join(cwd, glob);\r\n  }\r\n\r\n  // if glob had a trailing `/`, re-add it now in case it was removed\r\n  if (suffix === '/' && glob.slice(-1) !== '/') {\r\n    glob += '/';\r\n  }\r\n\r\n  // re-add leading `!` if it was removed\r\n  return ing.negated ? '!' + glob : glob;\r\n};\r\n\r\nfunction unixify(filepath) {\r\n  return filepath.replace(/\\\\/g, '/');\r\n}\r\n\r\nfunction join(dir, glob) {\r\n  if (dir.charAt(dir.length - 1) === '/') {\r\n    dir = dir.slice(0, -1);\r\n  }\r\n  if (glob.charAt(0) === '/') {\r\n    glob = glob.slice(1);\r\n  }\r\n  if (!glob) return dir;\r\n  return dir + '/' + glob;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}