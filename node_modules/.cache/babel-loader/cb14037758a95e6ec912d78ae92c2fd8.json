{"ast":null,"code":"'use strict';\n\nvar assert = require('assert');\n\nvar filter = require('arr-filter');\n\nvar map = require('arr-map');\n\nvar flatten = require('arr-flatten');\n\nvar forEach = require('array-each');\n\nfunction noop() {}\n\nfunction getExtensions(lastArg) {\n  if (typeof lastArg !== 'function') {\n    return lastArg;\n  }\n}\n\nfunction filterSuccess(elem) {\n  return elem.state === 'success';\n}\n\nfunction filterError(elem) {\n  return elem.state === 'error';\n}\n\nfunction buildOnSettled(done) {\n  if (typeof done !== 'function') {\n    done = noop;\n  }\n\n  function onSettled(error, result) {\n    if (error) {\n      return done(error, null);\n    }\n\n    var settledErrors = filter(result, filterError);\n    var settledResults = filter(result, filterSuccess);\n    var errors = null;\n\n    if (settledErrors.length) {\n      errors = map(settledErrors, 'value');\n    }\n\n    var results = null;\n\n    if (settledResults.length) {\n      results = map(settledResults, 'value');\n    }\n\n    done(errors, results);\n  }\n\n  return onSettled;\n}\n\nfunction verifyArguments(args) {\n  args = flatten(args);\n  var lastIdx = args.length - 1;\n  assert.ok(args.length, 'A set of functions to combine is required');\n  forEach(args, function (arg, argIdx) {\n    var isFunction = typeof arg === 'function';\n\n    if (isFunction) {\n      return;\n    }\n\n    if (argIdx === lastIdx) {\n      // Last arg can be an object of extension points\n      return;\n    }\n\n    var msg = 'Only functions can be combined, got ' + typeof arg + ' for argument ' + argIdx;\n    assert.ok(isFunction, msg);\n  });\n  return args;\n}\n\nmodule.exports = {\n  getExtensions: getExtensions,\n  onSettled: buildOnSettled,\n  verifyArguments: verifyArguments\n};","map":{"version":3,"sources":["C:/frontend/node_modules/bach/lib/helpers.js"],"names":["assert","require","filter","map","flatten","forEach","noop","getExtensions","lastArg","filterSuccess","elem","state","filterError","buildOnSettled","done","onSettled","error","result","settledErrors","settledResults","errors","length","results","verifyArguments","args","lastIdx","ok","arg","argIdx","isFunction","msg","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,YAAD,CAApB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,SAAD,CAAjB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,aAAD,CAArB;;AACA,IAAII,OAAO,GAAGJ,OAAO,CAAC,YAAD,CAArB;;AAEA,SAASK,IAAT,GAAgB,CAAE;;AAElB,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;AAC9B,MAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;AACjC,WAAOA,OAAP;AACD;AACF;;AAED,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAOA,IAAI,CAACC,KAAL,KAAe,SAAtB;AACD;;AAED,SAASC,WAAT,CAAqBF,IAArB,EAA2B;AACzB,SAAOA,IAAI,CAACC,KAAL,KAAe,OAAtB;AACD;;AAED,SAASE,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,MAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC9BA,IAAAA,IAAI,GAAGR,IAAP;AACD;;AAED,WAASS,SAAT,CAAmBC,KAAnB,EAA0BC,MAA1B,EAAkC;AAChC,QAAID,KAAJ,EAAW;AACT,aAAOF,IAAI,CAACE,KAAD,EAAQ,IAAR,CAAX;AACD;;AAED,QAAIE,aAAa,GAAGhB,MAAM,CAACe,MAAD,EAASL,WAAT,CAA1B;AACA,QAAIO,cAAc,GAAGjB,MAAM,CAACe,MAAD,EAASR,aAAT,CAA3B;AAEA,QAAIW,MAAM,GAAG,IAAb;;AACA,QAAIF,aAAa,CAACG,MAAlB,EAA0B;AACxBD,MAAAA,MAAM,GAAGjB,GAAG,CAACe,aAAD,EAAgB,OAAhB,CAAZ;AACD;;AAED,QAAII,OAAO,GAAG,IAAd;;AACA,QAAIH,cAAc,CAACE,MAAnB,EAA2B;AACzBC,MAAAA,OAAO,GAAGnB,GAAG,CAACgB,cAAD,EAAiB,OAAjB,CAAb;AACD;;AAEDL,IAAAA,IAAI,CAACM,MAAD,EAASE,OAAT,CAAJ;AACD;;AAED,SAAOP,SAAP;AACD;;AAED,SAASQ,eAAT,CAAyBC,IAAzB,EAA+B;AAC7BA,EAAAA,IAAI,GAAGpB,OAAO,CAACoB,IAAD,CAAd;AACA,MAAIC,OAAO,GAAGD,IAAI,CAACH,MAAL,GAAc,CAA5B;AAEArB,EAAAA,MAAM,CAAC0B,EAAP,CAAUF,IAAI,CAACH,MAAf,EAAuB,2CAAvB;AAEAhB,EAAAA,OAAO,CAACmB,IAAD,EAAO,UAASG,GAAT,EAAcC,MAAd,EAAsB;AAClC,QAAIC,UAAU,GAAG,OAAOF,GAAP,KAAe,UAAhC;;AACA,QAAIE,UAAJ,EAAgB;AACd;AACD;;AAED,QAAID,MAAM,KAAKH,OAAf,EAAwB;AACtB;AACA;AACD;;AAED,QAAIK,GAAG,GAAG,yCAAyC,OAAOH,GAAhD,GACR,gBADQ,GACWC,MADrB;AAEA5B,IAAAA,MAAM,CAAC0B,EAAP,CAAUG,UAAV,EAAsBC,GAAtB;AACD,GAdM,CAAP;AAgBA,SAAON,IAAP;AACD;;AAEDO,MAAM,CAACC,OAAP,GAAiB;AACfzB,EAAAA,aAAa,EAAEA,aADA;AAEfQ,EAAAA,SAAS,EAAEF,cAFI;AAGfU,EAAAA,eAAe,EAAEA;AAHF,CAAjB","sourcesContent":["'use strict';\r\n\r\nvar assert = require('assert');\r\n\r\nvar filter = require('arr-filter');\r\nvar map = require('arr-map');\r\nvar flatten = require('arr-flatten');\r\nvar forEach = require('array-each');\r\n\r\nfunction noop() {}\r\n\r\nfunction getExtensions(lastArg) {\r\n  if (typeof lastArg !== 'function') {\r\n    return lastArg;\r\n  }\r\n}\r\n\r\nfunction filterSuccess(elem) {\r\n  return elem.state === 'success';\r\n}\r\n\r\nfunction filterError(elem) {\r\n  return elem.state === 'error';\r\n}\r\n\r\nfunction buildOnSettled(done) {\r\n  if (typeof done !== 'function') {\r\n    done = noop;\r\n  }\r\n\r\n  function onSettled(error, result) {\r\n    if (error) {\r\n      return done(error, null);\r\n    }\r\n\r\n    var settledErrors = filter(result, filterError);\r\n    var settledResults = filter(result, filterSuccess);\r\n\r\n    var errors = null;\r\n    if (settledErrors.length) {\r\n      errors = map(settledErrors, 'value');\r\n    }\r\n\r\n    var results = null;\r\n    if (settledResults.length) {\r\n      results = map(settledResults, 'value');\r\n    }\r\n\r\n    done(errors, results);\r\n  }\r\n\r\n  return onSettled;\r\n}\r\n\r\nfunction verifyArguments(args) {\r\n  args = flatten(args);\r\n  var lastIdx = args.length - 1;\r\n\r\n  assert.ok(args.length, 'A set of functions to combine is required');\r\n\r\n  forEach(args, function(arg, argIdx) {\r\n    var isFunction = typeof arg === 'function';\r\n    if (isFunction) {\r\n      return;\r\n    }\r\n\r\n    if (argIdx === lastIdx) {\r\n      // Last arg can be an object of extension points\r\n      return;\r\n    }\r\n\r\n    var msg = 'Only functions can be combined, got ' + typeof arg +\r\n      ' for argument ' + argIdx;\r\n    assert.ok(isFunction, msg);\r\n  });\r\n\r\n  return args;\r\n}\r\n\r\nmodule.exports = {\r\n  getExtensions: getExtensions,\r\n  onSettled: buildOnSettled,\r\n  verifyArguments: verifyArguments,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}