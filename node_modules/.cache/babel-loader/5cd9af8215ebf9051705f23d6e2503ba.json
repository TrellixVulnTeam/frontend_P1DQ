{"ast":null,"code":"'use strict';\n\nvar assert = require('assert');\n\nvar WM = require('es6-weak-map');\n\nvar hasNativeWeakMap = require('es6-weak-map/is-native-implemented');\n\nvar defaultResolution = require('default-resolution');\n\nvar runtimes = new WM();\n\nfunction isFunction(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isExtensible(fn) {\n  if (hasNativeWeakMap) {\n    // Native weakmap doesn't care about extensible\n    return true;\n  }\n\n  return Object.isExtensible(fn);\n}\n\nfunction lastRun(fn, timeResolution) {\n  assert(isFunction(fn), 'Only functions can check lastRun');\n  assert(isExtensible(fn), 'Only extensible functions can check lastRun');\n  var time = runtimes.get(fn);\n\n  if (time == null) {\n    return;\n  }\n\n  var resolution = defaultResolution(timeResolution);\n  return time - time % resolution;\n}\n\nfunction capture(fn, timestamp) {\n  assert(isFunction(fn), 'Only functions can be captured');\n  assert(isExtensible(fn), 'Only extensible functions can be captured');\n  timestamp = timestamp || Date.now();\n  runtimes.set(fn, timestamp);\n}\n\nfunction release(fn) {\n  assert(isFunction(fn), 'Only functions can be captured');\n  assert(isExtensible(fn), 'Only extensible functions can be captured');\n  runtimes.delete(fn);\n}\n\nlastRun.capture = capture;\nlastRun.release = release;\nmodule.exports = lastRun;","map":{"version":3,"sources":["C:/frontend/node_modules/last-run/index.js"],"names":["assert","require","WM","hasNativeWeakMap","defaultResolution","runtimes","isFunction","fn","isExtensible","Object","lastRun","timeResolution","time","get","resolution","capture","timestamp","Date","now","set","release","delete","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,IAAIC,EAAE,GAAGD,OAAO,CAAC,cAAD,CAAhB;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,oCAAD,CAA9B;;AACA,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,oBAAD,CAA/B;;AAEA,IAAII,QAAQ,GAAG,IAAIH,EAAJ,EAAf;;AAEA,SAASI,UAAT,CAAoBC,EAApB,EAAwB;AACtB,SAAQ,OAAOA,EAAP,KAAc,UAAtB;AACD;;AAED,SAASC,YAAT,CAAsBD,EAAtB,EAA0B;AACxB,MAAIJ,gBAAJ,EAAsB;AACpB;AACA,WAAO,IAAP;AACD;;AAED,SAAOM,MAAM,CAACD,YAAP,CAAoBD,EAApB,CAAP;AACD;;AAED,SAASG,OAAT,CAAiBH,EAAjB,EAAqBI,cAArB,EAAqC;AACnCX,EAAAA,MAAM,CAACM,UAAU,CAACC,EAAD,CAAX,EAAiB,kCAAjB,CAAN;AACAP,EAAAA,MAAM,CAACQ,YAAY,CAACD,EAAD,CAAb,EAAmB,6CAAnB,CAAN;AAEA,MAAIK,IAAI,GAAGP,QAAQ,CAACQ,GAAT,CAAaN,EAAb,CAAX;;AAEA,MAAIK,IAAI,IAAI,IAAZ,EAAkB;AAChB;AACD;;AAED,MAAIE,UAAU,GAAGV,iBAAiB,CAACO,cAAD,CAAlC;AAEA,SAAOC,IAAI,GAAIA,IAAI,GAAGE,UAAtB;AACD;;AAED,SAASC,OAAT,CAAiBR,EAAjB,EAAqBS,SAArB,EAAgC;AAC9BhB,EAAAA,MAAM,CAACM,UAAU,CAACC,EAAD,CAAX,EAAiB,gCAAjB,CAAN;AACAP,EAAAA,MAAM,CAACQ,YAAY,CAACD,EAAD,CAAb,EAAmB,2CAAnB,CAAN;AAEAS,EAAAA,SAAS,GAAGA,SAAS,IAAIC,IAAI,CAACC,GAAL,EAAzB;AAEAb,EAAAA,QAAQ,CAACc,GAAT,CAAaZ,EAAb,EAAiBS,SAAjB;AACD;;AAED,SAASI,OAAT,CAAiBb,EAAjB,EAAqB;AACnBP,EAAAA,MAAM,CAACM,UAAU,CAACC,EAAD,CAAX,EAAiB,gCAAjB,CAAN;AACAP,EAAAA,MAAM,CAACQ,YAAY,CAACD,EAAD,CAAb,EAAmB,2CAAnB,CAAN;AAEAF,EAAAA,QAAQ,CAACgB,MAAT,CAAgBd,EAAhB;AACD;;AAEDG,OAAO,CAACK,OAAR,GAAkBA,OAAlB;AACAL,OAAO,CAACU,OAAR,GAAkBA,OAAlB;AAEAE,MAAM,CAACC,OAAP,GAAiBb,OAAjB","sourcesContent":["'use strict';\r\n\r\nvar assert = require('assert');\r\n\r\nvar WM = require('es6-weak-map');\r\nvar hasNativeWeakMap = require('es6-weak-map/is-native-implemented');\r\nvar defaultResolution = require('default-resolution');\r\n\r\nvar runtimes = new WM();\r\n\r\nfunction isFunction(fn) {\r\n  return (typeof fn === 'function');\r\n}\r\n\r\nfunction isExtensible(fn) {\r\n  if (hasNativeWeakMap) {\r\n    // Native weakmap doesn't care about extensible\r\n    return true;\r\n  }\r\n\r\n  return Object.isExtensible(fn);\r\n}\r\n\r\nfunction lastRun(fn, timeResolution) {\r\n  assert(isFunction(fn), 'Only functions can check lastRun');\r\n  assert(isExtensible(fn), 'Only extensible functions can check lastRun');\r\n\r\n  var time = runtimes.get(fn);\r\n\r\n  if (time == null) {\r\n    return;\r\n  }\r\n\r\n  var resolution = defaultResolution(timeResolution);\r\n\r\n  return time - (time % resolution);\r\n}\r\n\r\nfunction capture(fn, timestamp) {\r\n  assert(isFunction(fn), 'Only functions can be captured');\r\n  assert(isExtensible(fn), 'Only extensible functions can be captured');\r\n\r\n  timestamp = timestamp || Date.now();\r\n\r\n  runtimes.set(fn, timestamp);\r\n}\r\n\r\nfunction release(fn) {\r\n  assert(isFunction(fn), 'Only functions can be captured');\r\n  assert(isExtensible(fn), 'Only extensible functions can be captured');\r\n\r\n  runtimes.delete(fn);\r\n}\r\n\r\nlastRun.capture = capture;\r\nlastRun.release = release;\r\n\r\nmodule.exports = lastRun;\r\n"]},"metadata":{},"sourceType":"script"}