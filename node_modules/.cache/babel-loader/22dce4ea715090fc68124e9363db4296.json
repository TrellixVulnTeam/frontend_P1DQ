{"ast":null,"code":"'use strict';\n\nvar assert = require('assert');\n\nfunction isFunction(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isConstructor(registry) {\n  if (!(registry && registry.prototype)) {\n    return false;\n  }\n\n  var hasProtoGet = isFunction(registry.prototype.get);\n  var hasProtoSet = isFunction(registry.prototype.set);\n  var hasProtoInit = isFunction(registry.prototype.init);\n  var hasProtoTasks = isFunction(registry.prototype.tasks);\n\n  if (hasProtoGet || hasProtoSet || hasProtoInit || hasProtoTasks) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction validateRegistry(registry) {\n  try {\n    assert(isFunction(registry.get), 'Custom registry must have `get` function');\n    assert(isFunction(registry.set), 'Custom registry must have `set` function');\n    assert(isFunction(registry.init), 'Custom registry must have `init` function');\n    assert(isFunction(registry.tasks), 'Custom registry must have `tasks` function');\n  } catch (err) {\n    if (isConstructor(registry)) {\n      assert(false, 'Custom registries must be instantiated, but it looks like you passed a constructor');\n    } else {\n      throw err;\n    }\n  }\n}\n\nmodule.exports = validateRegistry;","map":{"version":3,"sources":["C:/frontend/node_modules/undertaker/lib/helpers/validateRegistry.js"],"names":["assert","require","isFunction","fn","isConstructor","registry","prototype","hasProtoGet","get","hasProtoSet","set","hasProtoInit","init","hasProtoTasks","tasks","validateRegistry","err","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,SAASC,UAAT,CAAoBC,EAApB,EAAwB;AACtB,SAAO,OAAOA,EAAP,KAAc,UAArB;AACD;;AAED,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;AAC/B,MAAI,EAAEA,QAAQ,IAAIA,QAAQ,CAACC,SAAvB,CAAJ,EAAuC;AACrC,WAAO,KAAP;AACD;;AAED,MAAIC,WAAW,GAAGL,UAAU,CAACG,QAAQ,CAACC,SAAT,CAAmBE,GAApB,CAA5B;AACA,MAAIC,WAAW,GAAGP,UAAU,CAACG,QAAQ,CAACC,SAAT,CAAmBI,GAApB,CAA5B;AACA,MAAIC,YAAY,GAAGT,UAAU,CAACG,QAAQ,CAACC,SAAT,CAAmBM,IAApB,CAA7B;AACA,MAAIC,aAAa,GAAGX,UAAU,CAACG,QAAQ,CAACC,SAAT,CAAmBQ,KAApB,CAA9B;;AAEA,MAAIP,WAAW,IAAIE,WAAf,IAA8BE,YAA9B,IAA8CE,aAAlD,EAAiE;AAC/D,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED,SAASE,gBAAT,CAA0BV,QAA1B,EAAoC;AAClC,MAAI;AACFL,IAAAA,MAAM,CAACE,UAAU,CAACG,QAAQ,CAACG,GAAV,CAAX,EAA2B,0CAA3B,CAAN;AACAR,IAAAA,MAAM,CAACE,UAAU,CAACG,QAAQ,CAACK,GAAV,CAAX,EAA2B,0CAA3B,CAAN;AACAV,IAAAA,MAAM,CAACE,UAAU,CAACG,QAAQ,CAACO,IAAV,CAAX,EAA4B,2CAA5B,CAAN;AACAZ,IAAAA,MAAM,CAACE,UAAU,CAACG,QAAQ,CAACS,KAAV,CAAX,EAA6B,4CAA7B,CAAN;AACD,GALD,CAKE,OAAOE,GAAP,EAAY;AACZ,QAAIZ,aAAa,CAACC,QAAD,CAAjB,EAA6B;AAC3BL,MAAAA,MAAM,CAAC,KAAD,EAAQ,oFAAR,CAAN;AACD,KAFD,MAEO;AACL,YAAMgB,GAAN;AACD;AACF;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiBH,gBAAjB","sourcesContent":["'use strict';\r\n\r\nvar assert = require('assert');\r\n\r\nfunction isFunction(fn) {\r\n  return typeof fn === 'function';\r\n}\r\n\r\nfunction isConstructor(registry) {\r\n  if (!(registry && registry.prototype)) {\r\n    return false;\r\n  }\r\n\r\n  var hasProtoGet = isFunction(registry.prototype.get);\r\n  var hasProtoSet = isFunction(registry.prototype.set);\r\n  var hasProtoInit = isFunction(registry.prototype.init);\r\n  var hasProtoTasks = isFunction(registry.prototype.tasks);\r\n\r\n  if (hasProtoGet || hasProtoSet || hasProtoInit || hasProtoTasks) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction validateRegistry(registry) {\r\n  try {\r\n    assert(isFunction(registry.get), 'Custom registry must have `get` function');\r\n    assert(isFunction(registry.set), 'Custom registry must have `set` function');\r\n    assert(isFunction(registry.init), 'Custom registry must have `init` function');\r\n    assert(isFunction(registry.tasks), 'Custom registry must have `tasks` function');\r\n  } catch (err) {\r\n    if (isConstructor(registry)) {\r\n      assert(false, 'Custom registries must be instantiated, but it looks like you passed a constructor');\r\n    } else {\r\n      throw err;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = validateRegistry;\r\n"]},"metadata":{},"sourceType":"script"}