{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar fs = require('graceful-fs');\n\nvar Vinyl = require('vinyl');\n\nvar through = require('through2');\n\nfunction prepareSymlink(folderResolver, optResolver) {\n  if (!folderResolver) {\n    throw new Error('Invalid output folder');\n  }\n\n  function normalize(file, enc, cb) {\n    if (!Vinyl.isVinyl(file)) {\n      return cb(new Error('Received a non-Vinyl object in `symlink()`'));\n    } // TODO: Remove this after people upgrade vinyl/transition from gulp-util\n\n\n    if (typeof file.isSymbolic !== 'function') {\n      file = new Vinyl(file);\n    }\n\n    var cwd = path.resolve(optResolver.resolve('cwd', file));\n    var outFolderPath = folderResolver.resolve('outFolder', file);\n\n    if (!outFolderPath) {\n      return cb(new Error('Invalid output folder'));\n    }\n\n    var basePath = path.resolve(cwd, outFolderPath);\n    var writePath = path.resolve(basePath, file.relative); // Wire up new properties\n    // Note: keep the target stats for now, we may need them in link-file\n\n    file.stat = file.stat || new fs.Stats();\n    file.cwd = cwd;\n    file.base = basePath; // This is the path we are linking *TO*\n\n    file.symlink = file.path;\n    file.path = writePath; // We have to set contents to null for a link\n    // Otherwise `isSymbolic()` returns false\n\n    file.contents = null;\n    cb(null, file);\n  }\n\n  return through.obj(normalize);\n}\n\nmodule.exports = prepareSymlink;","map":{"version":3,"sources":["C:/frontend/node_modules/vinyl-fs/lib/symlink/prepare.js"],"names":["path","require","fs","Vinyl","through","prepareSymlink","folderResolver","optResolver","Error","normalize","file","enc","cb","isVinyl","isSymbolic","cwd","resolve","outFolderPath","basePath","writePath","relative","stat","Stats","base","symlink","contents","obj","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIC,EAAE,GAAGD,OAAO,CAAC,aAAD,CAAhB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAArB;;AAEA,SAASI,cAAT,CAAwBC,cAAxB,EAAwCC,WAAxC,EAAqD;AACnD,MAAI,CAACD,cAAL,EAAqB;AACnB,UAAM,IAAIE,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,WAASC,SAAT,CAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,EAA9B,EAAkC;AAChC,QAAI,CAACT,KAAK,CAACU,OAAN,CAAcH,IAAd,CAAL,EAA0B;AACxB,aAAOE,EAAE,CAAC,IAAIJ,KAAJ,CAAU,4CAAV,CAAD,CAAT;AACD,KAH+B,CAKhC;;;AACA,QAAI,OAAOE,IAAI,CAACI,UAAZ,KAA2B,UAA/B,EAA2C;AACzCJ,MAAAA,IAAI,GAAG,IAAIP,KAAJ,CAAUO,IAAV,CAAP;AACD;;AAED,QAAIK,GAAG,GAAGf,IAAI,CAACgB,OAAL,CAAaT,WAAW,CAACS,OAAZ,CAAoB,KAApB,EAA2BN,IAA3B,CAAb,CAAV;AAEA,QAAIO,aAAa,GAAGX,cAAc,CAACU,OAAf,CAAuB,WAAvB,EAAoCN,IAApC,CAApB;;AACA,QAAI,CAACO,aAAL,EAAoB;AAClB,aAAOL,EAAE,CAAC,IAAIJ,KAAJ,CAAU,uBAAV,CAAD,CAAT;AACD;;AACD,QAAIU,QAAQ,GAAGlB,IAAI,CAACgB,OAAL,CAAaD,GAAb,EAAkBE,aAAlB,CAAf;AACA,QAAIE,SAAS,GAAGnB,IAAI,CAACgB,OAAL,CAAaE,QAAb,EAAuBR,IAAI,CAACU,QAA5B,CAAhB,CAjBgC,CAmBhC;AACA;;AACAV,IAAAA,IAAI,CAACW,IAAL,GAAaX,IAAI,CAACW,IAAL,IAAa,IAAInB,EAAE,CAACoB,KAAP,EAA1B;AACAZ,IAAAA,IAAI,CAACK,GAAL,GAAWA,GAAX;AACAL,IAAAA,IAAI,CAACa,IAAL,GAAYL,QAAZ,CAvBgC,CAwBhC;;AACAR,IAAAA,IAAI,CAACc,OAAL,GAAed,IAAI,CAACV,IAApB;AACAU,IAAAA,IAAI,CAACV,IAAL,GAAYmB,SAAZ,CA1BgC,CA2BhC;AACA;;AACAT,IAAAA,IAAI,CAACe,QAAL,GAAgB,IAAhB;AAEAb,IAAAA,EAAE,CAAC,IAAD,EAAOF,IAAP,CAAF;AACD;;AAED,SAAON,OAAO,CAACsB,GAAR,CAAYjB,SAAZ,CAAP;AACD;;AAEDkB,MAAM,CAACC,OAAP,GAAiBvB,cAAjB","sourcesContent":["'use strict';\r\n\r\nvar path = require('path');\r\n\r\nvar fs = require('graceful-fs');\r\nvar Vinyl = require('vinyl');\r\nvar through = require('through2');\r\n\r\nfunction prepareSymlink(folderResolver, optResolver) {\r\n  if (!folderResolver) {\r\n    throw new Error('Invalid output folder');\r\n  }\r\n\r\n  function normalize(file, enc, cb) {\r\n    if (!Vinyl.isVinyl(file)) {\r\n      return cb(new Error('Received a non-Vinyl object in `symlink()`'));\r\n    }\r\n\r\n    // TODO: Remove this after people upgrade vinyl/transition from gulp-util\r\n    if (typeof file.isSymbolic !== 'function') {\r\n      file = new Vinyl(file);\r\n    }\r\n\r\n    var cwd = path.resolve(optResolver.resolve('cwd', file));\r\n\r\n    var outFolderPath = folderResolver.resolve('outFolder', file);\r\n    if (!outFolderPath) {\r\n      return cb(new Error('Invalid output folder'));\r\n    }\r\n    var basePath = path.resolve(cwd, outFolderPath);\r\n    var writePath = path.resolve(basePath, file.relative);\r\n\r\n    // Wire up new properties\r\n    // Note: keep the target stats for now, we may need them in link-file\r\n    file.stat = (file.stat || new fs.Stats());\r\n    file.cwd = cwd;\r\n    file.base = basePath;\r\n    // This is the path we are linking *TO*\r\n    file.symlink = file.path;\r\n    file.path = writePath;\r\n    // We have to set contents to null for a link\r\n    // Otherwise `isSymbolic()` returns false\r\n    file.contents = null;\r\n\r\n    cb(null, file);\r\n  }\r\n\r\n  return through.obj(normalize);\r\n}\r\n\r\nmodule.exports = prepareSymlink;\r\n"]},"metadata":{},"sourceType":"script"}