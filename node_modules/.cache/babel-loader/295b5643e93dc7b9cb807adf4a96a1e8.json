{"ast":null,"code":"'use strict';\n\nvar os = require('os');\n\nvar equals = require('buffer-equal');\n\nvar cr = new Buffer('\\r\\n');\nvar nl = new Buffer('\\n');\n/**\r\n * Append a buffer to another buffer ensuring to preserve line ending characters.\r\n *\r\n * ```js\r\n * console.log([appendBuffer(new Buffer('abc\\r\\n'), new Buffer('def')).toString()]);\r\n * //=> [ 'abc\\r\\ndef\\r\\n' ]\r\n *\r\n * console.log([appendBuffer(new Buffer('abc\\n'), new Buffer('def')).toString()]);\r\n * //=> [ 'abc\\ndef\\n' ]\r\n *\r\n * // uses os.EOL when a line ending is not found\r\n * console.log([appendBuffer(new Buffer('abc'), new Buffer('def')).toString()]);\r\n * //=> [ 'abc\\ndef' ]\r\n * * ```\r\n * @param  {Buffer} `buf` Buffer that will be used to check for an existing line ending. The suffix is appended to this.\r\n * @param  {Buffer} `suffix` Buffer that will be appended to the buf.\r\n * @return {Buffer} Final Buffer\r\n * @api public\r\n */\n\nmodule.exports = function appendBuffer(buf, suffix) {\n  if (!suffix || !suffix.length) {\n    return buf;\n  }\n\n  var eol;\n\n  if (equals(buf.slice(-2), cr)) {\n    eol = cr;\n  } else if (equals(buf.slice(-1), nl)) {\n    eol = nl;\n  } else {\n    return Buffer.concat([buf, new Buffer(os.EOL), new Buffer(suffix)]);\n  }\n\n  return Buffer.concat([buf, new Buffer(suffix), eol]);\n};","map":{"version":3,"sources":["C:/frontend/node_modules/append-buffer/index.js"],"names":["os","require","equals","cr","Buffer","nl","module","exports","appendBuffer","buf","suffix","length","eol","slice","concat","EOL"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,cAAD,CAApB;;AACA,IAAIE,EAAE,GAAG,IAAIC,MAAJ,CAAW,MAAX,CAAT;AACA,IAAIC,EAAE,GAAG,IAAID,MAAJ,CAAW,IAAX,CAAT;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,MAA3B,EAAmC;AAClD,MAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAACC,MAAvB,EAA+B;AAC7B,WAAOF,GAAP;AACD;;AACD,MAAIG,GAAJ;;AACA,MAAIV,MAAM,CAACO,GAAG,CAACI,KAAJ,CAAU,CAAC,CAAX,CAAD,EAAgBV,EAAhB,CAAV,EAA+B;AAC7BS,IAAAA,GAAG,GAAGT,EAAN;AACD,GAFD,MAEO,IAAID,MAAM,CAACO,GAAG,CAACI,KAAJ,CAAU,CAAC,CAAX,CAAD,EAAgBR,EAAhB,CAAV,EAA+B;AACpCO,IAAAA,GAAG,GAAGP,EAAN;AACD,GAFM,MAEA;AACL,WAAOD,MAAM,CAACU,MAAP,CAAc,CAACL,GAAD,EAAM,IAAIL,MAAJ,CAAWJ,EAAE,CAACe,GAAd,CAAN,EAA0B,IAAIX,MAAJ,CAAWM,MAAX,CAA1B,CAAd,CAAP;AACD;;AACD,SAAON,MAAM,CAACU,MAAP,CAAc,CAACL,GAAD,EAAM,IAAIL,MAAJ,CAAWM,MAAX,CAAN,EAA0BE,GAA1B,CAAd,CAAP;AACD,CAbD","sourcesContent":["'use strict';\r\n\r\nvar os = require('os');\r\nvar equals = require('buffer-equal');\r\nvar cr = new Buffer('\\r\\n');\r\nvar nl = new Buffer('\\n');\r\n\r\n/**\r\n * Append a buffer to another buffer ensuring to preserve line ending characters.\r\n *\r\n * ```js\r\n * console.log([appendBuffer(new Buffer('abc\\r\\n'), new Buffer('def')).toString()]);\r\n * //=> [ 'abc\\r\\ndef\\r\\n' ]\r\n *\r\n * console.log([appendBuffer(new Buffer('abc\\n'), new Buffer('def')).toString()]);\r\n * //=> [ 'abc\\ndef\\n' ]\r\n *\r\n * // uses os.EOL when a line ending is not found\r\n * console.log([appendBuffer(new Buffer('abc'), new Buffer('def')).toString()]);\r\n * //=> [ 'abc\\ndef' ]\r\n * * ```\r\n * @param  {Buffer} `buf` Buffer that will be used to check for an existing line ending. The suffix is appended to this.\r\n * @param  {Buffer} `suffix` Buffer that will be appended to the buf.\r\n * @return {Buffer} Final Buffer\r\n * @api public\r\n */\r\n\r\nmodule.exports = function appendBuffer(buf, suffix) {\r\n  if (!suffix || !suffix.length) {\r\n    return buf;\r\n  }\r\n  var eol;\r\n  if (equals(buf.slice(-2), cr)) {\r\n    eol = cr;\r\n  } else if (equals(buf.slice(-1), nl)) {\r\n    eol = nl;\r\n  } else {\r\n    return Buffer.concat([buf, new Buffer(os.EOL), new Buffer(suffix)]);\r\n  }\r\n  return Buffer.concat([buf, new Buffer(suffix), eol]);\r\n};\r\n"]},"metadata":{},"sourceType":"script"}