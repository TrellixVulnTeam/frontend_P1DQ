{"ast":null,"code":"'use strict';\n\nvar through = require('through2');\n\nvar readDir = require('./read-dir');\n\nvar readStream = require('./read-stream');\n\nvar readBuffer = require('./read-buffer');\n\nvar readSymbolicLink = require('./read-symbolic-link');\n\nfunction readContents(optResolver) {\n  function readFile(file, enc, callback) {\n    // Skip reading contents if read option says so\n    var read = optResolver.resolve('read', file);\n\n    if (!read) {\n      return callback(null, file);\n    } // Don't fail to read a directory\n\n\n    if (file.isDirectory()) {\n      return readDir(file, optResolver, onRead);\n    } // Process symbolic links included with `resolveSymlinks` option\n\n\n    if (file.stat && file.stat.isSymbolicLink()) {\n      return readSymbolicLink(file, optResolver, onRead);\n    } // Read and pass full contents\n\n\n    var buffer = optResolver.resolve('buffer', file);\n\n    if (buffer) {\n      return readBuffer(file, optResolver, onRead);\n    } // Don't buffer anything - just pass streams\n\n\n    return readStream(file, optResolver, onRead); // This is invoked by the various readXxx modules when they've finished\n    // reading the contents.\n\n    function onRead(readErr) {\n      if (readErr) {\n        return callback(readErr);\n      }\n\n      return callback(null, file);\n    }\n  }\n\n  return through.obj(readFile);\n}\n\nmodule.exports = readContents;","map":{"version":3,"sources":["C:/frontend/node_modules/vinyl-fs/lib/src/read-contents/index.js"],"names":["through","require","readDir","readStream","readBuffer","readSymbolicLink","readContents","optResolver","readFile","file","enc","callback","read","resolve","isDirectory","onRead","stat","isSymbolicLink","buffer","readErr","obj","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAArB;;AAEA,IAAIC,OAAO,GAAGD,OAAO,CAAC,YAAD,CAArB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,eAAD,CAAxB;;AACA,IAAIG,UAAU,GAAGH,OAAO,CAAC,eAAD,CAAxB;;AACA,IAAII,gBAAgB,GAAGJ,OAAO,CAAC,sBAAD,CAA9B;;AAEA,SAASK,YAAT,CAAsBC,WAAtB,EAAmC;AAEjC,WAASC,QAAT,CAAkBC,IAAlB,EAAwBC,GAAxB,EAA6BC,QAA7B,EAAuC;AAErC;AACA,QAAIC,IAAI,GAAGL,WAAW,CAACM,OAAZ,CAAoB,MAApB,EAA4BJ,IAA5B,CAAX;;AACA,QAAI,CAACG,IAAL,EAAW;AACT,aAAOD,QAAQ,CAAC,IAAD,EAAOF,IAAP,CAAf;AACD,KANoC,CAQrC;;;AACA,QAAIA,IAAI,CAACK,WAAL,EAAJ,EAAwB;AACtB,aAAOZ,OAAO,CAACO,IAAD,EAAOF,WAAP,EAAoBQ,MAApB,CAAd;AACD,KAXoC,CAarC;;;AACA,QAAIN,IAAI,CAACO,IAAL,IAAaP,IAAI,CAACO,IAAL,CAAUC,cAAV,EAAjB,EAA6C;AAC3C,aAAOZ,gBAAgB,CAACI,IAAD,EAAOF,WAAP,EAAoBQ,MAApB,CAAvB;AACD,KAhBoC,CAkBrC;;;AACA,QAAIG,MAAM,GAAGX,WAAW,CAACM,OAAZ,CAAoB,QAApB,EAA8BJ,IAA9B,CAAb;;AACA,QAAIS,MAAJ,EAAY;AACV,aAAOd,UAAU,CAACK,IAAD,EAAOF,WAAP,EAAoBQ,MAApB,CAAjB;AACD,KAtBoC,CAwBrC;;;AACA,WAAOZ,UAAU,CAACM,IAAD,EAAOF,WAAP,EAAoBQ,MAApB,CAAjB,CAzBqC,CA2BrC;AACA;;AACA,aAASA,MAAT,CAAgBI,OAAhB,EAAyB;AACvB,UAAIA,OAAJ,EAAa;AACX,eAAOR,QAAQ,CAACQ,OAAD,CAAf;AACD;;AACD,aAAOR,QAAQ,CAAC,IAAD,EAAOF,IAAP,CAAf;AACD;AACF;;AAED,SAAOT,OAAO,CAACoB,GAAR,CAAYZ,QAAZ,CAAP;AACD;;AAEDa,MAAM,CAACC,OAAP,GAAiBhB,YAAjB","sourcesContent":["'use strict';\r\n\r\nvar through = require('through2');\r\n\r\nvar readDir = require('./read-dir');\r\nvar readStream = require('./read-stream');\r\nvar readBuffer = require('./read-buffer');\r\nvar readSymbolicLink = require('./read-symbolic-link');\r\n\r\nfunction readContents(optResolver) {\r\n\r\n  function readFile(file, enc, callback) {\r\n\r\n    // Skip reading contents if read option says so\r\n    var read = optResolver.resolve('read', file);\r\n    if (!read) {\r\n      return callback(null, file);\r\n    }\r\n\r\n    // Don't fail to read a directory\r\n    if (file.isDirectory()) {\r\n      return readDir(file, optResolver, onRead);\r\n    }\r\n\r\n    // Process symbolic links included with `resolveSymlinks` option\r\n    if (file.stat && file.stat.isSymbolicLink()) {\r\n      return readSymbolicLink(file, optResolver, onRead);\r\n    }\r\n\r\n    // Read and pass full contents\r\n    var buffer = optResolver.resolve('buffer', file);\r\n    if (buffer) {\r\n      return readBuffer(file, optResolver, onRead);\r\n    }\r\n\r\n    // Don't buffer anything - just pass streams\r\n    return readStream(file, optResolver, onRead);\r\n\r\n    // This is invoked by the various readXxx modules when they've finished\r\n    // reading the contents.\r\n    function onRead(readErr) {\r\n      if (readErr) {\r\n        return callback(readErr);\r\n      }\r\n      return callback(null, file);\r\n    }\r\n  }\r\n\r\n  return through.obj(readFile);\r\n}\r\n\r\nmodule.exports = readContents;\r\n"]},"metadata":{},"sourceType":"script"}