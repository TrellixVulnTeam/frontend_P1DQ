{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar Undertaker = require('undertaker');\n\nvar vfs = require('vinyl-fs');\n\nvar watch = require('glob-watcher');\n\nfunction Gulp() {\n  Undertaker.call(this); // Bind the functions for destructuring\n\n  this.watch = this.watch.bind(this);\n  this.task = this.task.bind(this);\n  this.series = this.series.bind(this);\n  this.parallel = this.parallel.bind(this);\n  this.registry = this.registry.bind(this);\n  this.tree = this.tree.bind(this);\n  this.lastRun = this.lastRun.bind(this);\n  this.src = this.src.bind(this);\n  this.dest = this.dest.bind(this);\n  this.symlink = this.symlink.bind(this);\n}\n\nutil.inherits(Gulp, Undertaker);\nGulp.prototype.src = vfs.src;\nGulp.prototype.dest = vfs.dest;\nGulp.prototype.symlink = vfs.symlink;\n\nGulp.prototype.watch = function (glob, opt, task) {\n  if (typeof opt === 'string' || typeof task === 'string' || Array.isArray(opt) || Array.isArray(task)) {\n    throw new Error('watching ' + glob + ': watch task has to be ' + 'a function (optionally generated by using gulp.parallel ' + 'or gulp.series)');\n  }\n\n  if (typeof opt === 'function') {\n    task = opt;\n    opt = {};\n  }\n\n  opt = opt || {};\n  var fn;\n\n  if (typeof task === 'function') {\n    fn = this.parallel(task);\n  }\n\n  return watch(glob, opt, fn);\n}; // Let people use this class from our instance\n\n\nGulp.prototype.Gulp = Gulp;\nvar inst = new Gulp();\nmodule.exports = inst;","map":{"version":3,"sources":["C:/frontend/node_modules/gulp/index.js"],"names":["util","require","Undertaker","vfs","watch","Gulp","call","bind","task","series","parallel","registry","tree","lastRun","src","dest","symlink","inherits","prototype","glob","opt","Array","isArray","Error","fn","inst","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,UAAD,CAAjB;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,cAAD,CAAnB;;AAEA,SAASI,IAAT,GAAgB;AACdH,EAAAA,UAAU,CAACI,IAAX,CAAgB,IAAhB,EADc,CAGd;;AACA,OAAKF,KAAL,GAAa,KAAKA,KAAL,CAAWG,IAAX,CAAgB,IAAhB,CAAb;AACA,OAAKC,IAAL,GAAY,KAAKA,IAAL,CAAUD,IAAV,CAAe,IAAf,CAAZ;AACA,OAAKE,MAAL,GAAc,KAAKA,MAAL,CAAYF,IAAZ,CAAiB,IAAjB,CAAd;AACA,OAAKG,QAAL,GAAgB,KAAKA,QAAL,CAAcH,IAAd,CAAmB,IAAnB,CAAhB;AACA,OAAKI,QAAL,GAAgB,KAAKA,QAAL,CAAcJ,IAAd,CAAmB,IAAnB,CAAhB;AACA,OAAKK,IAAL,GAAY,KAAKA,IAAL,CAAUL,IAAV,CAAe,IAAf,CAAZ;AACA,OAAKM,OAAL,GAAe,KAAKA,OAAL,CAAaN,IAAb,CAAkB,IAAlB,CAAf;AACA,OAAKO,GAAL,GAAW,KAAKA,GAAL,CAASP,IAAT,CAAc,IAAd,CAAX;AACA,OAAKQ,IAAL,GAAY,KAAKA,IAAL,CAAUR,IAAV,CAAe,IAAf,CAAZ;AACA,OAAKS,OAAL,GAAe,KAAKA,OAAL,CAAaT,IAAb,CAAkB,IAAlB,CAAf;AACD;;AACDP,IAAI,CAACiB,QAAL,CAAcZ,IAAd,EAAoBH,UAApB;AAEAG,IAAI,CAACa,SAAL,CAAeJ,GAAf,GAAqBX,GAAG,CAACW,GAAzB;AACAT,IAAI,CAACa,SAAL,CAAeH,IAAf,GAAsBZ,GAAG,CAACY,IAA1B;AACAV,IAAI,CAACa,SAAL,CAAeF,OAAf,GAAyBb,GAAG,CAACa,OAA7B;;AACAX,IAAI,CAACa,SAAL,CAAed,KAAf,GAAuB,UAASe,IAAT,EAAeC,GAAf,EAAoBZ,IAApB,EAA0B;AAC/C,MAAI,OAAOY,GAAP,KAAe,QAAf,IAA2B,OAAOZ,IAAP,KAAgB,QAA3C,IACFa,KAAK,CAACC,OAAN,CAAcF,GAAd,CADE,IACoBC,KAAK,CAACC,OAAN,CAAcd,IAAd,CADxB,EAC6C;AAC3C,UAAM,IAAIe,KAAJ,CAAU,cAAcJ,IAAd,GAAqB,yBAArB,GACd,0DADc,GAEd,iBAFI,CAAN;AAGD;;AAED,MAAI,OAAOC,GAAP,KAAe,UAAnB,EAA+B;AAC7BZ,IAAAA,IAAI,GAAGY,GAAP;AACAA,IAAAA,GAAG,GAAG,EAAN;AACD;;AAEDA,EAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;AAEA,MAAII,EAAJ;;AACA,MAAI,OAAOhB,IAAP,KAAgB,UAApB,EAAgC;AAC9BgB,IAAAA,EAAE,GAAG,KAAKd,QAAL,CAAcF,IAAd,CAAL;AACD;;AAED,SAAOJ,KAAK,CAACe,IAAD,EAAOC,GAAP,EAAYI,EAAZ,CAAZ;AACD,CArBD,C,CAuBA;;;AACAnB,IAAI,CAACa,SAAL,CAAeb,IAAf,GAAsBA,IAAtB;AAEA,IAAIoB,IAAI,GAAG,IAAIpB,IAAJ,EAAX;AACAqB,MAAM,CAACC,OAAP,GAAiBF,IAAjB","sourcesContent":["'use strict';\r\n\r\nvar util = require('util');\r\nvar Undertaker = require('undertaker');\r\nvar vfs = require('vinyl-fs');\r\nvar watch = require('glob-watcher');\r\n\r\nfunction Gulp() {\r\n  Undertaker.call(this);\r\n\r\n  // Bind the functions for destructuring\r\n  this.watch = this.watch.bind(this);\r\n  this.task = this.task.bind(this);\r\n  this.series = this.series.bind(this);\r\n  this.parallel = this.parallel.bind(this);\r\n  this.registry = this.registry.bind(this);\r\n  this.tree = this.tree.bind(this);\r\n  this.lastRun = this.lastRun.bind(this);\r\n  this.src = this.src.bind(this);\r\n  this.dest = this.dest.bind(this);\r\n  this.symlink = this.symlink.bind(this);\r\n}\r\nutil.inherits(Gulp, Undertaker);\r\n\r\nGulp.prototype.src = vfs.src;\r\nGulp.prototype.dest = vfs.dest;\r\nGulp.prototype.symlink = vfs.symlink;\r\nGulp.prototype.watch = function(glob, opt, task) {\r\n  if (typeof opt === 'string' || typeof task === 'string' ||\r\n    Array.isArray(opt) || Array.isArray(task)) {\r\n    throw new Error('watching ' + glob + ': watch task has to be ' +\r\n      'a function (optionally generated by using gulp.parallel ' +\r\n      'or gulp.series)');\r\n  }\r\n\r\n  if (typeof opt === 'function') {\r\n    task = opt;\r\n    opt = {};\r\n  }\r\n\r\n  opt = opt || {};\r\n\r\n  var fn;\r\n  if (typeof task === 'function') {\r\n    fn = this.parallel(task);\r\n  }\r\n\r\n  return watch(glob, opt, fn);\r\n};\r\n\r\n// Let people use this class from our instance\r\nGulp.prototype.Gulp = Gulp;\r\n\r\nvar inst = new Gulp();\r\nmodule.exports = inst;\r\n"]},"metadata":{},"sourceType":"script"}