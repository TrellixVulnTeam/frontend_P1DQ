{"ast":null,"code":"'use strict';\n\nvar fo = require('../../file-operations');\n\nvar readStream = require('../../src/read-contents/read-stream');\n\nfunction writeStream(file, optResolver, onWritten) {\n  var flags = fo.getFlags({\n    overwrite: optResolver.resolve('overwrite', file),\n    append: optResolver.resolve('append', file)\n  });\n  var opt = {\n    mode: file.stat.mode,\n    // TODO: need to test this\n    flags: flags\n  }; // TODO: is this the best API?\n\n  var outStream = fo.createWriteStream(file.path, opt, onFlush);\n  file.contents.once('error', onComplete);\n  outStream.once('error', onComplete);\n  outStream.once('finish', onComplete); // TODO: should this use a clone?\n\n  file.contents.pipe(outStream);\n\n  function onComplete(streamErr) {\n    // Cleanup event handlers before closing\n    file.contents.removeListener('error', onComplete);\n    outStream.removeListener('error', onComplete);\n    outStream.removeListener('finish', onComplete); // Need to guarantee the fd is closed before forwarding the error\n\n    outStream.once('close', onClose);\n    outStream.end();\n\n    function onClose(closeErr) {\n      onWritten(streamErr || closeErr);\n    }\n  } // Cleanup\n\n\n  function onFlush(fd, callback) {\n    // TODO: removing this before readStream because it replaces the stream\n    file.contents.removeListener('error', onComplete); // TODO: this is doing sync stuff & the callback seems unnecessary\n    // TODO: Replace the contents stream or use a clone?\n\n    readStream(file, complete);\n\n    function complete() {\n      if (typeof fd !== 'number') {\n        return callback();\n      }\n\n      fo.updateMetadata(fd, file, callback);\n    }\n  }\n}\n\nmodule.exports = writeStream;","map":{"version":3,"sources":["C:/frontend/node_modules/vinyl-fs/lib/dest/write-contents/write-stream.js"],"names":["fo","require","readStream","writeStream","file","optResolver","onWritten","flags","getFlags","overwrite","resolve","append","opt","mode","stat","outStream","createWriteStream","path","onFlush","contents","once","onComplete","pipe","streamErr","removeListener","onClose","end","closeErr","fd","callback","complete","updateMetadata","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,uBAAD,CAAhB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,qCAAD,CAAxB;;AAEA,SAASE,WAAT,CAAqBC,IAArB,EAA2BC,WAA3B,EAAwCC,SAAxC,EAAmD;AACjD,MAAIC,KAAK,GAAGP,EAAE,CAACQ,QAAH,CAAY;AACtBC,IAAAA,SAAS,EAAEJ,WAAW,CAACK,OAAZ,CAAoB,WAApB,EAAiCN,IAAjC,CADW;AAEtBO,IAAAA,MAAM,EAAEN,WAAW,CAACK,OAAZ,CAAoB,QAApB,EAA8BN,IAA9B;AAFc,GAAZ,CAAZ;AAIA,MAAIQ,GAAG,GAAG;AACRC,IAAAA,IAAI,EAAET,IAAI,CAACU,IAAL,CAAUD,IADR;AAER;AACAN,IAAAA,KAAK,EAAEA;AAHC,GAAV,CALiD,CAWjD;;AACA,MAAIQ,SAAS,GAAGf,EAAE,CAACgB,iBAAH,CAAqBZ,IAAI,CAACa,IAA1B,EAAgCL,GAAhC,EAAqCM,OAArC,CAAhB;AAEAd,EAAAA,IAAI,CAACe,QAAL,CAAcC,IAAd,CAAmB,OAAnB,EAA4BC,UAA5B;AACAN,EAAAA,SAAS,CAACK,IAAV,CAAe,OAAf,EAAwBC,UAAxB;AACAN,EAAAA,SAAS,CAACK,IAAV,CAAe,QAAf,EAAyBC,UAAzB,EAhBiD,CAkBjD;;AACAjB,EAAAA,IAAI,CAACe,QAAL,CAAcG,IAAd,CAAmBP,SAAnB;;AAEA,WAASM,UAAT,CAAoBE,SAApB,EAA+B;AAC7B;AACAnB,IAAAA,IAAI,CAACe,QAAL,CAAcK,cAAd,CAA6B,OAA7B,EAAsCH,UAAtC;AACAN,IAAAA,SAAS,CAACS,cAAV,CAAyB,OAAzB,EAAkCH,UAAlC;AACAN,IAAAA,SAAS,CAACS,cAAV,CAAyB,QAAzB,EAAmCH,UAAnC,EAJ6B,CAM7B;;AACAN,IAAAA,SAAS,CAACK,IAAV,CAAe,OAAf,EAAwBK,OAAxB;AACAV,IAAAA,SAAS,CAACW,GAAV;;AAEA,aAASD,OAAT,CAAiBE,QAAjB,EAA2B;AACzBrB,MAAAA,SAAS,CAACiB,SAAS,IAAII,QAAd,CAAT;AACD;AACF,GAlCgD,CAoCjD;;;AACA,WAAST,OAAT,CAAiBU,EAAjB,EAAqBC,QAArB,EAA+B;AAC7B;AACAzB,IAAAA,IAAI,CAACe,QAAL,CAAcK,cAAd,CAA6B,OAA7B,EAAsCH,UAAtC,EAF6B,CAI7B;AACA;;AACAnB,IAAAA,UAAU,CAACE,IAAD,EAAO0B,QAAP,CAAV;;AAEA,aAASA,QAAT,GAAoB;AAClB,UAAI,OAAOF,EAAP,KAAc,QAAlB,EAA4B;AAC1B,eAAOC,QAAQ,EAAf;AACD;;AAED7B,MAAAA,EAAE,CAAC+B,cAAH,CAAkBH,EAAlB,EAAsBxB,IAAtB,EAA4ByB,QAA5B;AACD;AACF;AAEF;;AAEDG,MAAM,CAACC,OAAP,GAAiB9B,WAAjB","sourcesContent":["'use strict';\r\n\r\nvar fo = require('../../file-operations');\r\nvar readStream = require('../../src/read-contents/read-stream');\r\n\r\nfunction writeStream(file, optResolver, onWritten) {\r\n  var flags = fo.getFlags({\r\n    overwrite: optResolver.resolve('overwrite', file),\r\n    append: optResolver.resolve('append', file),\r\n  });\r\n  var opt = {\r\n    mode: file.stat.mode,\r\n    // TODO: need to test this\r\n    flags: flags,\r\n  };\r\n\r\n  // TODO: is this the best API?\r\n  var outStream = fo.createWriteStream(file.path, opt, onFlush);\r\n\r\n  file.contents.once('error', onComplete);\r\n  outStream.once('error', onComplete);\r\n  outStream.once('finish', onComplete);\r\n\r\n  // TODO: should this use a clone?\r\n  file.contents.pipe(outStream);\r\n\r\n  function onComplete(streamErr) {\r\n    // Cleanup event handlers before closing\r\n    file.contents.removeListener('error', onComplete);\r\n    outStream.removeListener('error', onComplete);\r\n    outStream.removeListener('finish', onComplete);\r\n\r\n    // Need to guarantee the fd is closed before forwarding the error\r\n    outStream.once('close', onClose);\r\n    outStream.end();\r\n\r\n    function onClose(closeErr) {\r\n      onWritten(streamErr || closeErr);\r\n    }\r\n  }\r\n\r\n  // Cleanup\r\n  function onFlush(fd, callback) {\r\n    // TODO: removing this before readStream because it replaces the stream\r\n    file.contents.removeListener('error', onComplete);\r\n\r\n    // TODO: this is doing sync stuff & the callback seems unnecessary\r\n    // TODO: Replace the contents stream or use a clone?\r\n    readStream(file, complete);\r\n\r\n    function complete() {\r\n      if (typeof fd !== 'number') {\r\n        return callback();\r\n      }\r\n\r\n      fo.updateMetadata(fd, file, callback);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = writeStream;\r\n"]},"metadata":{},"sourceType":"script"}