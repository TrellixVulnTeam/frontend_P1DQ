{"ast":null,"code":"'use strict';\n\nvar os = require('os');\n\nvar path = require('path');\n\nvar through = require('through2');\n\nvar fo = require('../file-operations');\n\nvar isWindows = os.platform() === 'win32';\n\nfunction linkStream(optResolver) {\n  function linkFile(file, enc, callback) {\n    var isRelative = optResolver.resolve('relativeSymlinks', file);\n    var flags = fo.getFlags({\n      overwrite: optResolver.resolve('overwrite', file),\n      append: false\n    });\n\n    if (!isWindows) {\n      // On non-Windows, just use 'file'\n      return createLinkWithType('file');\n    }\n\n    fo.reflectStat(file.symlink, file, onReflectTarget);\n\n    function onReflectTarget(statErr) {\n      if (statErr && statErr.code !== 'ENOENT') {\n        return callback(statErr);\n      } // If target doesn't exist, the vinyl will still carry the target stats.\n      // Let's use those to determine which kind of dangling link to create.\n      // This option provides a way to create a Junction instead of a\n      // Directory symlink on Windows. This comes with the following caveats:\n      // * NTFS Junctions cannot be relative.\n      // * NTFS Junctions MUST be directories.\n      // * NTFS Junctions must be on the same file system.\n      // * Most products CANNOT detect a directory is a Junction:\n      //    This has the side effect of possibly having a whole directory\n      //    deleted when a product is deleting the Junction directory.\n      //    For example, JetBrains product lines will delete the entire contents\n      //    of the TARGET directory because the product does not realize it's\n      //    a symlink as the JVM and Node return false for isSymlink.\n      // This function is Windows only, so we don't need to check again\n\n\n      var useJunctions = optResolver.resolve('useJunctions', file);\n      var dirType = useJunctions ? 'junction' : 'dir';\n      var type = !statErr && file.isDirectory() ? dirType : 'file';\n      createLinkWithType(type);\n    }\n\n    function createLinkWithType(type) {\n      // This is done after prepare() to use the adjusted file.base property\n      if (isRelative && type !== 'junction') {\n        file.symlink = path.relative(file.base, file.symlink);\n      }\n\n      var opts = {\n        flags: flags,\n        type: type\n      };\n      fo.symlink(file.symlink, file.path, opts, onSymlink);\n    }\n\n    function onSymlink(symlinkErr) {\n      if (symlinkErr) {\n        return callback(symlinkErr);\n      }\n\n      fo.reflectLinkStat(file.path, file, onReflectLink);\n    }\n\n    function onReflectLink(reflectErr) {\n      if (reflectErr) {\n        return callback(reflectErr);\n      }\n\n      callback(null, file);\n    }\n  }\n\n  return through.obj(linkFile);\n}\n\nmodule.exports = linkStream;","map":{"version":3,"sources":["C:/frontend/node_modules/vinyl-fs/lib/symlink/link-file.js"],"names":["os","require","path","through","fo","isWindows","platform","linkStream","optResolver","linkFile","file","enc","callback","isRelative","resolve","flags","getFlags","overwrite","append","createLinkWithType","reflectStat","symlink","onReflectTarget","statErr","code","useJunctions","dirType","type","isDirectory","relative","base","opts","onSymlink","symlinkErr","reflectLinkStat","onReflectLink","reflectErr","obj","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIE,OAAO,GAAGF,OAAO,CAAC,UAAD,CAArB;;AAEA,IAAIG,EAAE,GAAGH,OAAO,CAAC,oBAAD,CAAhB;;AAEA,IAAII,SAAS,GAAIL,EAAE,CAACM,QAAH,OAAkB,OAAnC;;AAEA,SAASC,UAAT,CAAoBC,WAApB,EAAiC;AAE/B,WAASC,QAAT,CAAkBC,IAAlB,EAAwBC,GAAxB,EAA6BC,QAA7B,EAAuC;AACrC,QAAIC,UAAU,GAAGL,WAAW,CAACM,OAAZ,CAAoB,kBAApB,EAAwCJ,IAAxC,CAAjB;AACA,QAAIK,KAAK,GAAGX,EAAE,CAACY,QAAH,CAAY;AACtBC,MAAAA,SAAS,EAAET,WAAW,CAACM,OAAZ,CAAoB,WAApB,EAAiCJ,IAAjC,CADW;AAEtBQ,MAAAA,MAAM,EAAE;AAFc,KAAZ,CAAZ;;AAKA,QAAI,CAACb,SAAL,EAAgB;AACd;AACA,aAAOc,kBAAkB,CAAC,MAAD,CAAzB;AACD;;AAEDf,IAAAA,EAAE,CAACgB,WAAH,CAAeV,IAAI,CAACW,OAApB,EAA6BX,IAA7B,EAAmCY,eAAnC;;AAEA,aAASA,eAAT,CAAyBC,OAAzB,EAAkC;AAChC,UAAIA,OAAO,IAAIA,OAAO,CAACC,IAAR,KAAiB,QAAhC,EAA0C;AACxC,eAAOZ,QAAQ,CAACW,OAAD,CAAf;AACD,OAH+B,CAIhC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,UAAIE,YAAY,GAAGjB,WAAW,CAACM,OAAZ,CAAoB,cAApB,EAAoCJ,IAApC,CAAnB;AAEA,UAAIgB,OAAO,GAAGD,YAAY,GAAG,UAAH,GAAgB,KAA1C;AACA,UAAIE,IAAI,GAAG,CAACJ,OAAD,IAAYb,IAAI,CAACkB,WAAL,EAAZ,GAAiCF,OAAjC,GAA2C,MAAtD;AAEAP,MAAAA,kBAAkB,CAACQ,IAAD,CAAlB;AACD;;AAED,aAASR,kBAAT,CAA4BQ,IAA5B,EAAkC;AAChC;AACA,UAAId,UAAU,IAAIc,IAAI,KAAK,UAA3B,EAAuC;AACrCjB,QAAAA,IAAI,CAACW,OAAL,GAAenB,IAAI,CAAC2B,QAAL,CAAcnB,IAAI,CAACoB,IAAnB,EAAyBpB,IAAI,CAACW,OAA9B,CAAf;AACD;;AAED,UAAIU,IAAI,GAAG;AACThB,QAAAA,KAAK,EAAEA,KADE;AAETY,QAAAA,IAAI,EAAEA;AAFG,OAAX;AAIAvB,MAAAA,EAAE,CAACiB,OAAH,CAAWX,IAAI,CAACW,OAAhB,EAAyBX,IAAI,CAACR,IAA9B,EAAoC6B,IAApC,EAA0CC,SAA1C;AACD;;AAED,aAASA,SAAT,CAAmBC,UAAnB,EAA+B;AAC7B,UAAIA,UAAJ,EAAgB;AACd,eAAOrB,QAAQ,CAACqB,UAAD,CAAf;AACD;;AAED7B,MAAAA,EAAE,CAAC8B,eAAH,CAAmBxB,IAAI,CAACR,IAAxB,EAA8BQ,IAA9B,EAAoCyB,aAApC;AACD;;AAED,aAASA,aAAT,CAAuBC,UAAvB,EAAmC;AACjC,UAAIA,UAAJ,EAAgB;AACd,eAAOxB,QAAQ,CAACwB,UAAD,CAAf;AACD;;AAEDxB,MAAAA,QAAQ,CAAC,IAAD,EAAOF,IAAP,CAAR;AACD;AACF;;AAED,SAAOP,OAAO,CAACkC,GAAR,CAAY5B,QAAZ,CAAP;AACD;;AAED6B,MAAM,CAACC,OAAP,GAAiBhC,UAAjB","sourcesContent":["'use strict';\r\n\r\nvar os = require('os');\r\nvar path = require('path');\r\n\r\nvar through = require('through2');\r\n\r\nvar fo = require('../file-operations');\r\n\r\nvar isWindows = (os.platform() === 'win32');\r\n\r\nfunction linkStream(optResolver) {\r\n\r\n  function linkFile(file, enc, callback) {\r\n    var isRelative = optResolver.resolve('relativeSymlinks', file);\r\n    var flags = fo.getFlags({\r\n      overwrite: optResolver.resolve('overwrite', file),\r\n      append: false,\r\n    });\r\n\r\n    if (!isWindows) {\r\n      // On non-Windows, just use 'file'\r\n      return createLinkWithType('file');\r\n    }\r\n\r\n    fo.reflectStat(file.symlink, file, onReflectTarget);\r\n\r\n    function onReflectTarget(statErr) {\r\n      if (statErr && statErr.code !== 'ENOENT') {\r\n        return callback(statErr);\r\n      }\r\n      // If target doesn't exist, the vinyl will still carry the target stats.\r\n      // Let's use those to determine which kind of dangling link to create.\r\n\r\n      // This option provides a way to create a Junction instead of a\r\n      // Directory symlink on Windows. This comes with the following caveats:\r\n      // * NTFS Junctions cannot be relative.\r\n      // * NTFS Junctions MUST be directories.\r\n      // * NTFS Junctions must be on the same file system.\r\n      // * Most products CANNOT detect a directory is a Junction:\r\n      //    This has the side effect of possibly having a whole directory\r\n      //    deleted when a product is deleting the Junction directory.\r\n      //    For example, JetBrains product lines will delete the entire contents\r\n      //    of the TARGET directory because the product does not realize it's\r\n      //    a symlink as the JVM and Node return false for isSymlink.\r\n\r\n      // This function is Windows only, so we don't need to check again\r\n      var useJunctions = optResolver.resolve('useJunctions', file);\r\n\r\n      var dirType = useJunctions ? 'junction' : 'dir';\r\n      var type = !statErr && file.isDirectory() ? dirType : 'file';\r\n\r\n      createLinkWithType(type);\r\n    }\r\n\r\n    function createLinkWithType(type) {\r\n      // This is done after prepare() to use the adjusted file.base property\r\n      if (isRelative && type !== 'junction') {\r\n        file.symlink = path.relative(file.base, file.symlink);\r\n      }\r\n\r\n      var opts = {\r\n        flags: flags,\r\n        type: type,\r\n      };\r\n      fo.symlink(file.symlink, file.path, opts, onSymlink);\r\n    }\r\n\r\n    function onSymlink(symlinkErr) {\r\n      if (symlinkErr) {\r\n        return callback(symlinkErr);\r\n      }\r\n\r\n      fo.reflectLinkStat(file.path, file, onReflectLink);\r\n    }\r\n\r\n    function onReflectLink(reflectErr) {\r\n      if (reflectErr) {\r\n        return callback(reflectErr);\r\n      }\r\n\r\n      callback(null, file);\r\n    }\r\n  }\r\n\r\n  return through.obj(linkFile);\r\n}\r\n\r\nmodule.exports = linkStream;\r\n"]},"metadata":{},"sourceType":"script"}