{"ast":null,"code":"'use strict';\n\nvar through = require('through2');\n\nvar writeDir = require('./write-dir');\n\nvar writeStream = require('./write-stream');\n\nvar writeBuffer = require('./write-buffer');\n\nvar writeSymbolicLink = require('./write-symbolic-link');\n\nvar fo = require('../../file-operations');\n\nfunction writeContents(optResolver) {\n  function writeFile(file, enc, callback) {\n    // Write it as a symlink\n    if (file.isSymbolic()) {\n      return writeSymbolicLink(file, optResolver, onWritten);\n    } // If directory then mkdirp it\n\n\n    if (file.isDirectory()) {\n      return writeDir(file, optResolver, onWritten);\n    } // Stream it to disk yo\n\n\n    if (file.isStream()) {\n      return writeStream(file, optResolver, onWritten);\n    } // Write it like normal\n\n\n    if (file.isBuffer()) {\n      return writeBuffer(file, optResolver, onWritten);\n    } // If no contents then do nothing\n\n\n    if (file.isNull()) {\n      return onWritten();\n    } // This is invoked by the various writeXxx modules when they've finished\n    // writing the contents.\n\n\n    function onWritten(writeErr) {\n      var flags = fo.getFlags({\n        overwrite: optResolver.resolve('overwrite', file),\n        append: optResolver.resolve('append', file)\n      });\n\n      if (fo.isFatalOverwriteError(writeErr, flags)) {\n        return callback(writeErr);\n      }\n\n      callback(null, file);\n    }\n  }\n\n  return through.obj(writeFile);\n}\n\nmodule.exports = writeContents;","map":{"version":3,"sources":["C:/frontend/node_modules/vinyl-fs/lib/dest/write-contents/index.js"],"names":["through","require","writeDir","writeStream","writeBuffer","writeSymbolicLink","fo","writeContents","optResolver","writeFile","file","enc","callback","isSymbolic","onWritten","isDirectory","isStream","isBuffer","isNull","writeErr","flags","getFlags","overwrite","resolve","append","isFatalOverwriteError","obj","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAArB;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,aAAD,CAAtB;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAII,iBAAiB,GAAGJ,OAAO,CAAC,uBAAD,CAA/B;;AAEA,IAAIK,EAAE,GAAGL,OAAO,CAAC,uBAAD,CAAhB;;AAEA,SAASM,aAAT,CAAuBC,WAAvB,EAAoC;AAElC,WAASC,SAAT,CAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,QAA9B,EAAwC;AACtC;AACA,QAAIF,IAAI,CAACG,UAAL,EAAJ,EAAuB;AACrB,aAAOR,iBAAiB,CAACK,IAAD,EAAOF,WAAP,EAAoBM,SAApB,CAAxB;AACD,KAJqC,CAMtC;;;AACA,QAAIJ,IAAI,CAACK,WAAL,EAAJ,EAAwB;AACtB,aAAOb,QAAQ,CAACQ,IAAD,EAAOF,WAAP,EAAoBM,SAApB,CAAf;AACD,KATqC,CAWtC;;;AACA,QAAIJ,IAAI,CAACM,QAAL,EAAJ,EAAqB;AACnB,aAAOb,WAAW,CAACO,IAAD,EAAOF,WAAP,EAAoBM,SAApB,CAAlB;AACD,KAdqC,CAgBtC;;;AACA,QAAIJ,IAAI,CAACO,QAAL,EAAJ,EAAqB;AACnB,aAAOb,WAAW,CAACM,IAAD,EAAOF,WAAP,EAAoBM,SAApB,CAAlB;AACD,KAnBqC,CAqBtC;;;AACA,QAAIJ,IAAI,CAACQ,MAAL,EAAJ,EAAmB;AACjB,aAAOJ,SAAS,EAAhB;AACD,KAxBqC,CA0BtC;AACA;;;AACA,aAASA,SAAT,CAAmBK,QAAnB,EAA6B;AAC3B,UAAIC,KAAK,GAAGd,EAAE,CAACe,QAAH,CAAY;AACtBC,QAAAA,SAAS,EAAEd,WAAW,CAACe,OAAZ,CAAoB,WAApB,EAAiCb,IAAjC,CADW;AAEtBc,QAAAA,MAAM,EAAEhB,WAAW,CAACe,OAAZ,CAAoB,QAApB,EAA8Bb,IAA9B;AAFc,OAAZ,CAAZ;;AAIA,UAAIJ,EAAE,CAACmB,qBAAH,CAAyBN,QAAzB,EAAmCC,KAAnC,CAAJ,EAA+C;AAC7C,eAAOR,QAAQ,CAACO,QAAD,CAAf;AACD;;AAEDP,MAAAA,QAAQ,CAAC,IAAD,EAAOF,IAAP,CAAR;AACD;AAEF;;AAED,SAAOV,OAAO,CAAC0B,GAAR,CAAYjB,SAAZ,CAAP;AACD;;AAEDkB,MAAM,CAACC,OAAP,GAAiBrB,aAAjB","sourcesContent":["'use strict';\r\n\r\nvar through = require('through2');\r\n\r\nvar writeDir = require('./write-dir');\r\nvar writeStream = require('./write-stream');\r\nvar writeBuffer = require('./write-buffer');\r\nvar writeSymbolicLink = require('./write-symbolic-link');\r\n\r\nvar fo = require('../../file-operations');\r\n\r\nfunction writeContents(optResolver) {\r\n\r\n  function writeFile(file, enc, callback) {\r\n    // Write it as a symlink\r\n    if (file.isSymbolic()) {\r\n      return writeSymbolicLink(file, optResolver, onWritten);\r\n    }\r\n\r\n    // If directory then mkdirp it\r\n    if (file.isDirectory()) {\r\n      return writeDir(file, optResolver, onWritten);\r\n    }\r\n\r\n    // Stream it to disk yo\r\n    if (file.isStream()) {\r\n      return writeStream(file, optResolver, onWritten);\r\n    }\r\n\r\n    // Write it like normal\r\n    if (file.isBuffer()) {\r\n      return writeBuffer(file, optResolver, onWritten);\r\n    }\r\n\r\n    // If no contents then do nothing\r\n    if (file.isNull()) {\r\n      return onWritten();\r\n    }\r\n\r\n    // This is invoked by the various writeXxx modules when they've finished\r\n    // writing the contents.\r\n    function onWritten(writeErr) {\r\n      var flags = fo.getFlags({\r\n        overwrite: optResolver.resolve('overwrite', file),\r\n        append: optResolver.resolve('append', file),\r\n      });\r\n      if (fo.isFatalOverwriteError(writeErr, flags)) {\r\n        return callback(writeErr);\r\n      }\r\n\r\n      callback(null, file);\r\n    }\r\n\r\n  }\r\n\r\n  return through.obj(writeFile);\r\n}\r\n\r\nmodule.exports = writeContents;\r\n"]},"metadata":{},"sourceType":"script"}