{"ast":null,"code":"'use strict';\n\nvar os = require('os');\n\nvar path = require('path');\n\nvar fo = require('../../file-operations');\n\nvar isWindows = os.platform() === 'win32';\n\nfunction writeSymbolicLink(file, optResolver, onWritten) {\n  if (!file.symlink) {\n    return onWritten(new Error('Missing symlink property on symbolic vinyl'));\n  }\n\n  var isRelative = optResolver.resolve('relativeSymlinks', file);\n  var flags = fo.getFlags({\n    overwrite: optResolver.resolve('overwrite', file),\n    append: optResolver.resolve('append', file)\n  });\n\n  if (!isWindows) {\n    // On non-Windows, just use 'file'\n    return createLinkWithType('file');\n  }\n\n  fo.reflectStat(file.symlink, file, onReflect);\n\n  function onReflect(statErr) {\n    if (statErr && statErr.code !== 'ENOENT') {\n      return onWritten(statErr);\n    } // This option provides a way to create a Junction instead of a\n    // Directory symlink on Windows. This comes with the following caveats:\n    // * NTFS Junctions cannot be relative.\n    // * NTFS Junctions MUST be directories.\n    // * NTFS Junctions must be on the same file system.\n    // * Most products CANNOT detect a directory is a Junction:\n    //    This has the side effect of possibly having a whole directory\n    //    deleted when a product is deleting the Junction directory.\n    //    For example, JetBrains product lines will delete the entire contents\n    //    of the TARGET directory because the product does not realize it's\n    //    a symlink as the JVM and Node return false for isSymlink.\n    // This function is Windows only, so we don't need to check again\n\n\n    var useJunctions = optResolver.resolve('useJunctions', file);\n    var dirType = useJunctions ? 'junction' : 'dir'; // Dangling links are always 'file'\n\n    var type = !statErr && file.isDirectory() ? dirType : 'file';\n    createLinkWithType(type);\n  }\n\n  function createLinkWithType(type) {\n    // This is done after prepare() to use the adjusted file.base property\n    if (isRelative && type !== 'junction') {\n      file.symlink = path.relative(file.base, file.symlink);\n    }\n\n    var opts = {\n      flags: flags,\n      type: type\n    };\n    fo.symlink(file.symlink, file.path, opts, onSymlink);\n\n    function onSymlink(symlinkErr) {\n      if (symlinkErr) {\n        return onWritten(symlinkErr);\n      }\n\n      fo.reflectLinkStat(file.path, file, onWritten);\n    }\n  }\n}\n\nmodule.exports = writeSymbolicLink;","map":{"version":3,"sources":["C:/frontend/node_modules/vinyl-fs/lib/dest/write-contents/write-symbolic-link.js"],"names":["os","require","path","fo","isWindows","platform","writeSymbolicLink","file","optResolver","onWritten","symlink","Error","isRelative","resolve","flags","getFlags","overwrite","append","createLinkWithType","reflectStat","onReflect","statErr","code","useJunctions","dirType","type","isDirectory","relative","base","opts","onSymlink","symlinkErr","reflectLinkStat","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIE,EAAE,GAAGF,OAAO,CAAC,uBAAD,CAAhB;;AAEA,IAAIG,SAAS,GAAIJ,EAAE,CAACK,QAAH,OAAkB,OAAnC;;AAEA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,WAAjC,EAA8CC,SAA9C,EAAyD;AACvD,MAAI,CAACF,IAAI,CAACG,OAAV,EAAmB;AACjB,WAAOD,SAAS,CAAC,IAAIE,KAAJ,CAAU,4CAAV,CAAD,CAAhB;AACD;;AAED,MAAIC,UAAU,GAAGJ,WAAW,CAACK,OAAZ,CAAoB,kBAApB,EAAwCN,IAAxC,CAAjB;AACA,MAAIO,KAAK,GAAGX,EAAE,CAACY,QAAH,CAAY;AACtBC,IAAAA,SAAS,EAAER,WAAW,CAACK,OAAZ,CAAoB,WAApB,EAAiCN,IAAjC,CADW;AAEtBU,IAAAA,MAAM,EAAET,WAAW,CAACK,OAAZ,CAAoB,QAApB,EAA8BN,IAA9B;AAFc,GAAZ,CAAZ;;AAKA,MAAI,CAACH,SAAL,EAAgB;AACd;AACA,WAAOc,kBAAkB,CAAC,MAAD,CAAzB;AACD;;AAEDf,EAAAA,EAAE,CAACgB,WAAH,CAAeZ,IAAI,CAACG,OAApB,EAA6BH,IAA7B,EAAmCa,SAAnC;;AAEA,WAASA,SAAT,CAAmBC,OAAnB,EAA4B;AAC1B,QAAIA,OAAO,IAAIA,OAAO,CAACC,IAAR,KAAiB,QAAhC,EAA0C;AACxC,aAAOb,SAAS,CAACY,OAAD,CAAhB;AACD,KAHyB,CAK1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,QAAIE,YAAY,GAAGf,WAAW,CAACK,OAAZ,CAAoB,cAApB,EAAoCN,IAApC,CAAnB;AAEA,QAAIiB,OAAO,GAAGD,YAAY,GAAG,UAAH,GAAgB,KAA1C,CApB0B,CAqB1B;;AACA,QAAIE,IAAI,GAAG,CAACJ,OAAD,IAAYd,IAAI,CAACmB,WAAL,EAAZ,GAAiCF,OAAjC,GAA2C,MAAtD;AAEAN,IAAAA,kBAAkB,CAACO,IAAD,CAAlB;AACD;;AAED,WAASP,kBAAT,CAA4BO,IAA5B,EAAkC;AAChC;AACA,QAAIb,UAAU,IAAIa,IAAI,KAAK,UAA3B,EAAuC;AACrClB,MAAAA,IAAI,CAACG,OAAL,GAAeR,IAAI,CAACyB,QAAL,CAAcpB,IAAI,CAACqB,IAAnB,EAAyBrB,IAAI,CAACG,OAA9B,CAAf;AACD;;AAED,QAAImB,IAAI,GAAG;AACTf,MAAAA,KAAK,EAAEA,KADE;AAETW,MAAAA,IAAI,EAAEA;AAFG,KAAX;AAIAtB,IAAAA,EAAE,CAACO,OAAH,CAAWH,IAAI,CAACG,OAAhB,EAAyBH,IAAI,CAACL,IAA9B,EAAoC2B,IAApC,EAA0CC,SAA1C;;AAEA,aAASA,SAAT,CAAmBC,UAAnB,EAA+B;AAC7B,UAAIA,UAAJ,EAAgB;AACd,eAAOtB,SAAS,CAACsB,UAAD,CAAhB;AACD;;AAED5B,MAAAA,EAAE,CAAC6B,eAAH,CAAmBzB,IAAI,CAACL,IAAxB,EAA8BK,IAA9B,EAAoCE,SAApC;AACD;AACF;AACF;;AAEDwB,MAAM,CAACC,OAAP,GAAiB5B,iBAAjB","sourcesContent":["'use strict';\r\n\r\nvar os = require('os');\r\nvar path = require('path');\r\n\r\nvar fo = require('../../file-operations');\r\n\r\nvar isWindows = (os.platform() === 'win32');\r\n\r\nfunction writeSymbolicLink(file, optResolver, onWritten) {\r\n  if (!file.symlink) {\r\n    return onWritten(new Error('Missing symlink property on symbolic vinyl'));\r\n  }\r\n\r\n  var isRelative = optResolver.resolve('relativeSymlinks', file);\r\n  var flags = fo.getFlags({\r\n    overwrite: optResolver.resolve('overwrite', file),\r\n    append: optResolver.resolve('append', file),\r\n  });\r\n\r\n  if (!isWindows) {\r\n    // On non-Windows, just use 'file'\r\n    return createLinkWithType('file');\r\n  }\r\n\r\n  fo.reflectStat(file.symlink, file, onReflect);\r\n\r\n  function onReflect(statErr) {\r\n    if (statErr && statErr.code !== 'ENOENT') {\r\n      return onWritten(statErr);\r\n    }\r\n\r\n    // This option provides a way to create a Junction instead of a\r\n    // Directory symlink on Windows. This comes with the following caveats:\r\n    // * NTFS Junctions cannot be relative.\r\n    // * NTFS Junctions MUST be directories.\r\n    // * NTFS Junctions must be on the same file system.\r\n    // * Most products CANNOT detect a directory is a Junction:\r\n    //    This has the side effect of possibly having a whole directory\r\n    //    deleted when a product is deleting the Junction directory.\r\n    //    For example, JetBrains product lines will delete the entire contents\r\n    //    of the TARGET directory because the product does not realize it's\r\n    //    a symlink as the JVM and Node return false for isSymlink.\r\n\r\n    // This function is Windows only, so we don't need to check again\r\n    var useJunctions = optResolver.resolve('useJunctions', file);\r\n\r\n    var dirType = useJunctions ? 'junction' : 'dir';\r\n    // Dangling links are always 'file'\r\n    var type = !statErr && file.isDirectory() ? dirType : 'file';\r\n\r\n    createLinkWithType(type);\r\n  }\r\n\r\n  function createLinkWithType(type) {\r\n    // This is done after prepare() to use the adjusted file.base property\r\n    if (isRelative && type !== 'junction') {\r\n      file.symlink = path.relative(file.base, file.symlink);\r\n    }\r\n\r\n    var opts = {\r\n      flags: flags,\r\n      type: type,\r\n    };\r\n    fo.symlink(file.symlink, file.path, opts, onSymlink);\r\n\r\n    function onSymlink(symlinkErr) {\r\n      if (symlinkErr) {\r\n        return onWritten(symlinkErr);\r\n      }\r\n\r\n      fo.reflectLinkStat(file.path, file, onWritten);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = writeSymbolicLink;\r\n"]},"metadata":{},"sourceType":"script"}