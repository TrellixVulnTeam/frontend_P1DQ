{"ast":null,"code":"// Service handling all details related to JWT and Basic Authentication.\nimport axios from 'axios';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(id, pw) {\n    return axios.get('/basicauth', {\n      headers: {\n        authorization: this.createBasicAuthToken(id, pw)\n      }\n    });\n  }\n\n  createBasicAuthToken(id, pw) {\n    return 'Basic ' + window.btoa(id + \":\" + pw);\n  }\n\n  registerSuccessfulLogin(id, pw) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, id);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(id, pw));\n  } // sets up the axios interceptor to add the authorization token on every subsequent REST API call. config.headers.authorization = token\n\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/frontend/src/service/AuthenticationService.js"],"names":["axios","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeBasicAuthenticationService","id","pw","get","headers","authorization","createBasicAuthToken","window","btoa","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","token","interceptors","request","use","config","isUserLoggedIn","user","getItem","logout","removeItem"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;;AACP,MAAMC,qBAAN,CAA4B;AACxBC,EAAAA,iCAAiC,CAACC,EAAD,EAAKC,EAAL,EAAS;AACtC,WAAOL,KAAK,CAACM,GAAN,CAAU,YAAV,EACH;AAAEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,EAA1B,EAA8BC,EAA9B;AAAjB;AAAX,KADG,CAAP;AAGH;;AAEDI,EAAAA,oBAAoB,CAACL,EAAD,EAAKC,EAAL,EAAS;AACzB,WAAO,WAAWK,MAAM,CAACC,IAAP,CAAYP,EAAE,GAAG,GAAL,GAAWC,EAAvB,CAAlB;AACH;;AAEDO,EAAAA,uBAAuB,CAACR,EAAD,EAAKC,EAAL,EAAS;AAC5BQ,IAAAA,cAAc,CAACC,OAAf,CAAuBb,gCAAvB,EAAyDG,EAAzD;AACA,SAAKW,sBAAL,CAA4B,KAAKN,oBAAL,CAA0BL,EAA1B,EAA8BC,EAA9B,CAA5B;AACH,GAduB,CAgBxB;;;AACAU,EAAAA,sBAAsB,CAACC,KAAD,EAAQ;AAC1BhB,IAAAA,KAAK,CAACiB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACIC,MAAM,IAAI;AACN,UAAI,KAAKC,cAAL,EAAJ,EAA2B;AACvBD,QAAAA,MAAM,CAACb,OAAP,CAAeC,aAAf,GAA+BQ,KAA/B;AACH;;AACD,aAAOI,MAAP;AACH,KANL;AAQH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGT,cAAc,CAACU,OAAf,CAAuBtB,gCAAvB,CAAX;AACA,QAAIqB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,MAAM,GAAG;AACLX,IAAAA,cAAc,CAACY,UAAf,CAA0BxB,gCAA1B;AACH;;AApCuB;;AAuC5B,eAAe,IAAIC,qBAAJ,EAAf","sourcesContent":["// Service handling all details related to JWT and Basic Authentication.\r\nimport axios from 'axios';\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\r\nclass AuthenticationService {\r\n    executeBasicAuthenticationService(id, pw) {\r\n        return axios.get('/basicauth',\r\n            { headers: { authorization: this.createBasicAuthToken(id, pw) } }\r\n        );\r\n    }\r\n\r\n    createBasicAuthToken(id, pw) {\r\n        return 'Basic ' + window.btoa(id + \":\" + pw);\r\n    }\r\n\r\n    registerSuccessfulLogin(id, pw) {\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, id);\r\n        this.setupAxiosInterceptors(this.createBasicAuthToken(id, pw));\r\n    }\r\n\r\n    // sets up the axios interceptor to add the authorization token on every subsequent REST API call. config.headers.authorization = token\r\n    setupAxiosInterceptors(token) {\r\n        axios.interceptors.request.use(\r\n            config => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config;\r\n            }\r\n        )\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n        if (user === null) return false;\r\n        return true;\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}