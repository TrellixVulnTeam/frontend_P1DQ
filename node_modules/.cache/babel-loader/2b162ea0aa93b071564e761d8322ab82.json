{"ast":null,"code":"'use strict';\n\nvar through = require('through2');\n\nfunction forward(chunk, enc, cb) {\n  cb(null, chunk);\n}\n\nfunction toThrough(readable) {\n  var opts = {\n    objectMode: readable._readableState.objectMode,\n    highWaterMark: readable._readableState.highWaterMark\n  };\n\n  function flush(cb) {\n    var self = this;\n    readable.on('readable', onReadable);\n    readable.on('end', cb);\n\n    function onReadable() {\n      var chunk;\n\n      while (chunk = readable.read()) {\n        self.push(chunk);\n      }\n    }\n  }\n\n  var wrapper = through(opts, forward, flush);\n  var shouldFlow = true;\n  wrapper.once('pipe', onPipe);\n  wrapper.on('newListener', onListener);\n  readable.on('error', wrapper.emit.bind(wrapper, 'error'));\n\n  function onListener(event) {\n    // Once we've seen the data or readable event, check if we need to flow\n    if (event === 'data' || event === 'readable') {\n      maybeFlow();\n      this.removeListener('newListener', onListener);\n    }\n  }\n\n  function onPipe() {\n    // If the wrapper is piped, disable flow\n    shouldFlow = false;\n  }\n\n  function maybeFlow() {\n    // If we need to flow, end the stream which triggers flush\n    if (shouldFlow) {\n      wrapper.end();\n    }\n  }\n\n  return wrapper;\n}\n\nmodule.exports = toThrough;","map":{"version":3,"sources":["C:/frontend/node_modules/to-through/index.js"],"names":["through","require","forward","chunk","enc","cb","toThrough","readable","opts","objectMode","_readableState","highWaterMark","flush","self","on","onReadable","read","push","wrapper","shouldFlow","once","onPipe","onListener","emit","bind","event","maybeFlow","removeListener","end","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAArB;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,GAAxB,EAA6BC,EAA7B,EAAiC;AAC/BA,EAAAA,EAAE,CAAC,IAAD,EAAOF,KAAP,CAAF;AACD;;AAED,SAASG,SAAT,CAAmBC,QAAnB,EAA6B;AAE3B,MAAIC,IAAI,GAAG;AACTC,IAAAA,UAAU,EAAEF,QAAQ,CAACG,cAAT,CAAwBD,UAD3B;AAETE,IAAAA,aAAa,EAAEJ,QAAQ,CAACG,cAAT,CAAwBC;AAF9B,GAAX;;AAKA,WAASC,KAAT,CAAeP,EAAf,EAAmB;AACjB,QAAIQ,IAAI,GAAG,IAAX;AAEAN,IAAAA,QAAQ,CAACO,EAAT,CAAY,UAAZ,EAAwBC,UAAxB;AACAR,IAAAA,QAAQ,CAACO,EAAT,CAAY,KAAZ,EAAmBT,EAAnB;;AAEA,aAASU,UAAT,GAAsB;AACpB,UAAIZ,KAAJ;;AACA,aAAOA,KAAK,GAAGI,QAAQ,CAACS,IAAT,EAAf,EAAgC;AAC9BH,QAAAA,IAAI,CAACI,IAAL,CAAUd,KAAV;AACD;AACF;AACF;;AAED,MAAIe,OAAO,GAAGlB,OAAO,CAACQ,IAAD,EAAON,OAAP,EAAgBU,KAAhB,CAArB;AAEA,MAAIO,UAAU,GAAG,IAAjB;AACAD,EAAAA,OAAO,CAACE,IAAR,CAAa,MAAb,EAAqBC,MAArB;AACAH,EAAAA,OAAO,CAACJ,EAAR,CAAW,aAAX,EAA0BQ,UAA1B;AACAf,EAAAA,QAAQ,CAACO,EAAT,CAAY,OAAZ,EAAqBI,OAAO,CAACK,IAAR,CAAaC,IAAb,CAAkBN,OAAlB,EAA2B,OAA3B,CAArB;;AAEA,WAASI,UAAT,CAAoBG,KAApB,EAA2B;AACzB;AACA,QAAIA,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,UAAlC,EAA8C;AAC5CC,MAAAA,SAAS;AACT,WAAKC,cAAL,CAAoB,aAApB,EAAmCL,UAAnC;AACD;AACF;;AAED,WAASD,MAAT,GAAkB;AAChB;AACAF,IAAAA,UAAU,GAAG,KAAb;AACD;;AAED,WAASO,SAAT,GAAqB;AACnB;AACA,QAAIP,UAAJ,EAAgB;AACdD,MAAAA,OAAO,CAACU,GAAR;AACD;AACF;;AAED,SAAOV,OAAP;AACD;;AAEDW,MAAM,CAACC,OAAP,GAAiBxB,SAAjB","sourcesContent":["'use strict';\r\n\r\nvar through = require('through2');\r\n\r\nfunction forward(chunk, enc, cb) {\r\n  cb(null, chunk);\r\n}\r\n\r\nfunction toThrough(readable) {\r\n\r\n  var opts = {\r\n    objectMode: readable._readableState.objectMode,\r\n    highWaterMark: readable._readableState.highWaterMark,\r\n  };\r\n\r\n  function flush(cb) {\r\n    var self = this;\r\n\r\n    readable.on('readable', onReadable);\r\n    readable.on('end', cb);\r\n\r\n    function onReadable() {\r\n      var chunk;\r\n      while (chunk = readable.read()) {\r\n        self.push(chunk);\r\n      }\r\n    }\r\n  }\r\n\r\n  var wrapper = through(opts, forward, flush);\r\n\r\n  var shouldFlow = true;\r\n  wrapper.once('pipe', onPipe);\r\n  wrapper.on('newListener', onListener);\r\n  readable.on('error', wrapper.emit.bind(wrapper, 'error'));\r\n\r\n  function onListener(event) {\r\n    // Once we've seen the data or readable event, check if we need to flow\r\n    if (event === 'data' || event === 'readable') {\r\n      maybeFlow();\r\n      this.removeListener('newListener', onListener);\r\n    }\r\n  }\r\n\r\n  function onPipe() {\r\n    // If the wrapper is piped, disable flow\r\n    shouldFlow = false;\r\n  }\r\n\r\n  function maybeFlow() {\r\n    // If we need to flow, end the stream which triggers flush\r\n    if (shouldFlow) {\r\n      wrapper.end();\r\n    }\r\n  }\r\n\r\n  return wrapper;\r\n}\r\n\r\nmodule.exports = toThrough;\r\n"]},"metadata":{},"sourceType":"script"}