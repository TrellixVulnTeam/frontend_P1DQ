{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar fs = require('graceful-fs');\n\nvar MASK_MODE = parseInt('7777', 8);\nvar DEFAULT_DIR_MODE = parseInt('0777', 8);\n\nfunction mkdirp(dirpath, customMode, callback) {\n  if (typeof customMode === 'function') {\n    callback = customMode;\n    customMode = undefined;\n  }\n\n  var mode = customMode || DEFAULT_DIR_MODE & ~process.umask();\n  dirpath = path.resolve(dirpath);\n  fs.mkdir(dirpath, mode, onMkdir);\n\n  function onMkdir(mkdirErr) {\n    if (!mkdirErr) {\n      return fs.stat(dirpath, onStat);\n    }\n\n    switch (mkdirErr.code) {\n      case 'ENOENT':\n        {\n          return mkdirp(path.dirname(dirpath), onRecurse);\n        }\n\n      case 'EEXIST':\n        {\n          return fs.stat(dirpath, onStat);\n        }\n\n      default:\n        {\n          return callback(mkdirErr);\n        }\n    }\n\n    function onStat(statErr, stats) {\n      if (statErr) {\n        return callback(statErr);\n      }\n\n      if (!stats.isDirectory()) {\n        return callback(mkdirErr);\n      } // TODO: Is it proper to mask like this?\n\n\n      if ((stats.mode & MASK_MODE) === mode) {\n        return callback();\n      }\n\n      if (!customMode) {\n        return callback();\n      }\n\n      fs.chmod(dirpath, mode, callback);\n    }\n  }\n\n  function onRecurse(recurseErr) {\n    if (recurseErr) {\n      return callback(recurseErr);\n    }\n\n    mkdirp(dirpath, mode, callback);\n  }\n}\n\nmodule.exports = mkdirp;","map":{"version":3,"sources":["C:/frontend/node_modules/fs-mkdirp-stream/mkdirp.js"],"names":["path","require","fs","MASK_MODE","parseInt","DEFAULT_DIR_MODE","mkdirp","dirpath","customMode","callback","undefined","mode","process","umask","resolve","mkdir","onMkdir","mkdirErr","stat","onStat","code","dirname","onRecurse","statErr","stats","isDirectory","chmod","recurseErr","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIC,EAAE,GAAGD,OAAO,CAAC,aAAD,CAAhB;;AAEA,IAAIE,SAAS,GAAGC,QAAQ,CAAC,MAAD,EAAS,CAAT,CAAxB;AACA,IAAIC,gBAAgB,GAAGD,QAAQ,CAAC,MAAD,EAAS,CAAT,CAA/B;;AAEA,SAASE,MAAT,CAAgBC,OAAhB,EAAyBC,UAAzB,EAAqCC,QAArC,EAA+C;AAC7C,MAAI,OAAOD,UAAP,KAAsB,UAA1B,EAAsC;AACpCC,IAAAA,QAAQ,GAAGD,UAAX;AACAA,IAAAA,UAAU,GAAGE,SAAb;AACD;;AAED,MAAIC,IAAI,GAAGH,UAAU,IAAKH,gBAAgB,GAAG,CAACO,OAAO,CAACC,KAAR,EAA9C;AACAN,EAAAA,OAAO,GAAGP,IAAI,CAACc,OAAL,CAAaP,OAAb,CAAV;AAEAL,EAAAA,EAAE,CAACa,KAAH,CAASR,OAAT,EAAkBI,IAAlB,EAAwBK,OAAxB;;AAEA,WAASA,OAAT,CAAiBC,QAAjB,EAA2B;AACzB,QAAI,CAACA,QAAL,EAAe;AACb,aAAOf,EAAE,CAACgB,IAAH,CAAQX,OAAR,EAAiBY,MAAjB,CAAP;AACD;;AAED,YAAQF,QAAQ,CAACG,IAAjB;AACE,WAAK,QAAL;AAAe;AACb,iBAAOd,MAAM,CAACN,IAAI,CAACqB,OAAL,CAAad,OAAb,CAAD,EAAwBe,SAAxB,CAAb;AACD;;AAED,WAAK,QAAL;AAAe;AACb,iBAAOpB,EAAE,CAACgB,IAAH,CAAQX,OAAR,EAAiBY,MAAjB,CAAP;AACD;;AAED;AAAS;AACP,iBAAOV,QAAQ,CAACQ,QAAD,CAAf;AACD;AAXH;;AAcA,aAASE,MAAT,CAAgBI,OAAhB,EAAyBC,KAAzB,EAAgC;AAC9B,UAAID,OAAJ,EAAa;AACX,eAAOd,QAAQ,CAACc,OAAD,CAAf;AACD;;AAED,UAAI,CAACC,KAAK,CAACC,WAAN,EAAL,EAA0B;AACxB,eAAOhB,QAAQ,CAACQ,QAAD,CAAf;AACD,OAP6B,CAS9B;;;AACA,UAAI,CAACO,KAAK,CAACb,IAAN,GAAaR,SAAd,MAA6BQ,IAAjC,EAAuC;AACrC,eAAOF,QAAQ,EAAf;AACD;;AAED,UAAI,CAACD,UAAL,EAAiB;AACf,eAAOC,QAAQ,EAAf;AACD;;AAEDP,MAAAA,EAAE,CAACwB,KAAH,CAASnB,OAAT,EAAkBI,IAAlB,EAAwBF,QAAxB;AACD;AACF;;AAED,WAASa,SAAT,CAAmBK,UAAnB,EAA+B;AAC7B,QAAIA,UAAJ,EAAgB;AACd,aAAOlB,QAAQ,CAACkB,UAAD,CAAf;AACD;;AAEDrB,IAAAA,MAAM,CAACC,OAAD,EAAUI,IAAV,EAAgBF,QAAhB,CAAN;AACD;AACF;;AAEDmB,MAAM,CAACC,OAAP,GAAiBvB,MAAjB","sourcesContent":["'use strict';\r\n\r\nvar path = require('path');\r\n\r\nvar fs = require('graceful-fs');\r\n\r\nvar MASK_MODE = parseInt('7777', 8);\r\nvar DEFAULT_DIR_MODE = parseInt('0777', 8);\r\n\r\nfunction mkdirp(dirpath, customMode, callback) {\r\n  if (typeof customMode === 'function') {\r\n    callback = customMode;\r\n    customMode = undefined;\r\n  }\r\n\r\n  var mode = customMode || (DEFAULT_DIR_MODE & ~process.umask());\r\n  dirpath = path.resolve(dirpath);\r\n\r\n  fs.mkdir(dirpath, mode, onMkdir);\r\n\r\n  function onMkdir(mkdirErr) {\r\n    if (!mkdirErr) {\r\n      return fs.stat(dirpath, onStat);\r\n    }\r\n\r\n    switch (mkdirErr.code) {\r\n      case 'ENOENT': {\r\n        return mkdirp(path.dirname(dirpath), onRecurse);\r\n      }\r\n\r\n      case 'EEXIST': {\r\n        return fs.stat(dirpath, onStat);\r\n      }\r\n\r\n      default: {\r\n        return callback(mkdirErr);\r\n      }\r\n    }\r\n\r\n    function onStat(statErr, stats) {\r\n      if (statErr) {\r\n        return callback(statErr);\r\n      }\r\n\r\n      if (!stats.isDirectory()) {\r\n        return callback(mkdirErr);\r\n      }\r\n\r\n      // TODO: Is it proper to mask like this?\r\n      if ((stats.mode & MASK_MODE) === mode) {\r\n        return callback();\r\n      }\r\n\r\n      if (!customMode) {\r\n        return callback();\r\n      }\r\n\r\n      fs.chmod(dirpath, mode, callback);\r\n    }\r\n  }\r\n\r\n  function onRecurse(recurseErr) {\r\n    if (recurseErr) {\r\n      return callback(recurseErr);\r\n    }\r\n\r\n    mkdirp(dirpath, mode, callback);\r\n  }\r\n}\r\n\r\nmodule.exports = mkdirp;\r\n"]},"metadata":{},"sourceType":"script"}