{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar fs = require('graceful-fs');\n\nvar nal = require('now-and-later');\n\nvar File = require('vinyl');\n\nvar convert = require('convert-source-map');\n\nvar removeBOM = require('remove-bom-buffer');\n\nvar appendBuffer = require('append-buffer');\n\nvar normalizePath = require('normalize-path');\n\nvar urlRegex = /^(https?|webpack(-[^:]+)?):\\/\\//;\n\nfunction isRemoteSource(source) {\n  return source.match(urlRegex);\n}\n\nfunction parse(data) {\n  try {\n    return JSON.parse(removeBOM(data));\n  } catch (err) {// TODO: should this log a debug?\n  }\n}\n\nfunction loadSourceMap(file, state, callback) {\n  // Try to read inline source map\n  state.map = convert.fromSource(state.content);\n\n  if (state.map) {\n    state.map = state.map.toObject(); // Sources in map are relative to the source file\n\n    state.path = file.dirname;\n    state.content = convert.removeComments(state.content); // Remove source map comment from source\n\n    file.contents = new Buffer(state.content, 'utf8');\n    return callback();\n  } // Look for source map comment referencing a source map file\n\n\n  var mapComment = convert.mapFileCommentRegex.exec(state.content);\n  var mapFile;\n\n  if (mapComment) {\n    mapFile = path.resolve(file.dirname, mapComment[1] || mapComment[2]);\n    state.content = convert.removeMapFileComments(state.content); // Remove source map comment from source\n\n    file.contents = new Buffer(state.content, 'utf8');\n  } else {\n    // If no comment try map file with same name as source file\n    mapFile = file.path + '.map';\n  } // Sources in external map are relative to map file\n\n\n  state.path = path.dirname(mapFile);\n  fs.readFile(mapFile, onRead);\n\n  function onRead(err, data) {\n    if (err) {\n      return callback();\n    }\n\n    state.map = parse(data);\n    callback();\n  }\n} // Fix source paths and sourceContent for imported source map\n\n\nfunction fixImportedSourceMap(file, state, callback) {\n  if (!state.map) {\n    return callback();\n  }\n\n  state.map.sourcesContent = state.map.sourcesContent || [];\n  nal.map(state.map.sources, normalizeSourcesAndContent, callback);\n\n  function assignSourcesContent(sourceContent, idx) {\n    state.map.sourcesContent[idx] = sourceContent;\n  }\n\n  function normalizeSourcesAndContent(sourcePath, idx, cb) {\n    var sourceRoot = state.map.sourceRoot || '';\n    var sourceContent = state.map.sourcesContent[idx] || null;\n\n    if (isRemoteSource(sourcePath)) {\n      assignSourcesContent(sourceContent, idx);\n      return cb();\n    }\n\n    if (state.map.sourcesContent[idx]) {\n      return cb();\n    }\n\n    if (sourceRoot && isRemoteSource(sourceRoot)) {\n      assignSourcesContent(sourceContent, idx);\n      return cb();\n    }\n\n    var basePath = path.resolve(file.base, sourceRoot);\n    var absPath = path.resolve(state.path, sourceRoot, sourcePath);\n    var relPath = path.relative(basePath, absPath);\n    var unixRelPath = normalizePath(relPath);\n    state.map.sources[idx] = unixRelPath;\n\n    if (absPath !== file.path) {\n      // Load content from file async\n      return fs.readFile(absPath, onRead);\n    } // If current file: use content\n\n\n    assignSourcesContent(state.content, idx);\n    cb();\n\n    function onRead(err, data) {\n      if (err) {\n        assignSourcesContent(null, idx);\n        return cb();\n      }\n\n      assignSourcesContent(removeBOM(data).toString('utf8'), idx);\n      cb();\n    }\n  }\n}\n\nfunction mapsLoaded(file, state, callback) {\n  if (!state.map) {\n    state.map = {\n      version: 3,\n      names: [],\n      mappings: '',\n      sources: [normalizePath(file.relative)],\n      sourcesContent: [state.content]\n    };\n  }\n\n  state.map.file = normalizePath(file.relative);\n  file.sourceMap = state.map;\n  callback();\n}\n\nfunction addSourceMaps(file, state, callback) {\n  var tasks = [loadSourceMap, fixImportedSourceMap, mapsLoaded];\n\n  function apply(fn, key, cb) {\n    fn(file, state, cb);\n  }\n\n  nal.mapSeries(tasks, apply, done);\n\n  function done() {\n    callback(null, file);\n  }\n}\n/* Write Helpers */\n\n\nfunction createSourceMapFile(opts) {\n  return new File({\n    cwd: opts.cwd,\n    base: opts.base,\n    path: opts.path,\n    contents: new Buffer(JSON.stringify(opts.content)),\n    stat: {\n      isFile: function () {\n        return true;\n      },\n      isDirectory: function () {\n        return false;\n      },\n      isBlockDevice: function () {\n        return false;\n      },\n      isCharacterDevice: function () {\n        return false;\n      },\n      isSymbolicLink: function () {\n        return false;\n      },\n      isFIFO: function () {\n        return false;\n      },\n      isSocket: function () {\n        return false;\n      }\n    }\n  });\n}\n\nvar needsMultiline = ['.css'];\n\nfunction getCommentOptions(extname) {\n  var opts = {\n    multiline: needsMultiline.indexOf(extname) !== -1\n  };\n  return opts;\n}\n\nfunction writeSourceMaps(file, destPath, callback) {\n  var sourceMapFile;\n  var commentOpts = getCommentOptions(file.extname);\n  var comment;\n\n  if (destPath == null) {\n    // Encode source map into comment\n    comment = convert.fromObject(file.sourceMap).toComment(commentOpts);\n  } else {\n    var mapFile = path.join(destPath, file.relative) + '.map';\n    var sourceMapPath = path.join(file.base, mapFile); // Create new sourcemap File\n\n    sourceMapFile = createSourceMapFile({\n      cwd: file.cwd,\n      base: file.base,\n      path: sourceMapPath,\n      content: file.sourceMap\n    });\n    var sourcemapLocation = path.relative(file.dirname, sourceMapPath);\n    sourcemapLocation = normalizePath(sourcemapLocation);\n    comment = convert.generateMapFileComment(sourcemapLocation, commentOpts);\n  } // Append source map comment\n\n\n  file.contents = appendBuffer(file.contents, comment);\n  callback(null, file, sourceMapFile);\n}\n\nmodule.exports = {\n  addSourceMaps: addSourceMaps,\n  writeSourceMaps: writeSourceMaps\n};","map":{"version":3,"sources":["C:/frontend/node_modules/vinyl-sourcemap/lib/helpers.js"],"names":["path","require","fs","nal","File","convert","removeBOM","appendBuffer","normalizePath","urlRegex","isRemoteSource","source","match","parse","data","JSON","err","loadSourceMap","file","state","callback","map","fromSource","content","toObject","dirname","removeComments","contents","Buffer","mapComment","mapFileCommentRegex","exec","mapFile","resolve","removeMapFileComments","readFile","onRead","fixImportedSourceMap","sourcesContent","sources","normalizeSourcesAndContent","assignSourcesContent","sourceContent","idx","sourcePath","cb","sourceRoot","basePath","base","absPath","relPath","relative","unixRelPath","toString","mapsLoaded","version","names","mappings","sourceMap","addSourceMaps","tasks","apply","fn","key","mapSeries","done","createSourceMapFile","opts","cwd","stringify","stat","isFile","isDirectory","isBlockDevice","isCharacterDevice","isSymbolicLink","isFIFO","isSocket","needsMultiline","getCommentOptions","extname","multiline","indexOf","writeSourceMaps","destPath","sourceMapFile","commentOpts","comment","fromObject","toComment","join","sourceMapPath","sourcemapLocation","generateMapFileComment","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar path = require('path');\r\n\r\nvar fs = require('graceful-fs');\r\nvar nal = require('now-and-later');\r\nvar File = require('vinyl');\r\nvar convert = require('convert-source-map');\r\nvar removeBOM = require('remove-bom-buffer');\r\nvar appendBuffer = require('append-buffer');\r\nvar normalizePath = require('normalize-path');\r\n\r\nvar urlRegex = /^(https?|webpack(-[^:]+)?):\\/\\//;\r\n\r\nfunction isRemoteSource(source) {\r\n  return source.match(urlRegex);\r\n}\r\n\r\nfunction parse(data) {\r\n  try {\r\n    return JSON.parse(removeBOM(data));\r\n  } catch (err) {\r\n    // TODO: should this log a debug?\r\n  }\r\n}\r\n\r\nfunction loadSourceMap(file, state, callback) {\r\n  // Try to read inline source map\r\n  state.map = convert.fromSource(state.content);\r\n\r\n  if (state.map) {\r\n    state.map = state.map.toObject();\r\n    // Sources in map are relative to the source file\r\n    state.path = file.dirname;\r\n    state.content = convert.removeComments(state.content);\r\n    // Remove source map comment from source\r\n    file.contents = new Buffer(state.content, 'utf8');\r\n    return callback();\r\n  }\r\n\r\n  // Look for source map comment referencing a source map file\r\n  var mapComment = convert.mapFileCommentRegex.exec(state.content);\r\n\r\n  var mapFile;\r\n  if (mapComment) {\r\n    mapFile = path.resolve(file.dirname, mapComment[1] || mapComment[2]);\r\n    state.content = convert.removeMapFileComments(state.content);\r\n    // Remove source map comment from source\r\n    file.contents = new Buffer(state.content, 'utf8');\r\n  } else {\r\n    // If no comment try map file with same name as source file\r\n    mapFile = file.path + '.map';\r\n  }\r\n\r\n  // Sources in external map are relative to map file\r\n  state.path = path.dirname(mapFile);\r\n\r\n  fs.readFile(mapFile, onRead);\r\n\r\n  function onRead(err, data) {\r\n    if (err) {\r\n      return callback();\r\n    }\r\n    state.map = parse(data);\r\n    callback();\r\n  }\r\n}\r\n\r\n// Fix source paths and sourceContent for imported source map\r\nfunction fixImportedSourceMap(file, state, callback) {\r\n  if (!state.map) {\r\n    return callback();\r\n  }\r\n\r\n  state.map.sourcesContent = state.map.sourcesContent || [];\r\n\r\n  nal.map(state.map.sources, normalizeSourcesAndContent, callback);\r\n\r\n  function assignSourcesContent(sourceContent, idx) {\r\n    state.map.sourcesContent[idx] = sourceContent;\r\n  }\r\n\r\n  function normalizeSourcesAndContent(sourcePath, idx, cb) {\r\n    var sourceRoot = state.map.sourceRoot || '';\r\n    var sourceContent = state.map.sourcesContent[idx] || null;\r\n\r\n    if (isRemoteSource(sourcePath)) {\r\n      assignSourcesContent(sourceContent, idx);\r\n      return cb();\r\n    }\r\n\r\n    if (state.map.sourcesContent[idx]) {\r\n      return cb();\r\n    }\r\n\r\n    if (sourceRoot && isRemoteSource(sourceRoot)) {\r\n      assignSourcesContent(sourceContent, idx);\r\n      return cb();\r\n    }\r\n\r\n    var basePath = path.resolve(file.base, sourceRoot);\r\n    var absPath = path.resolve(state.path, sourceRoot, sourcePath);\r\n    var relPath = path.relative(basePath, absPath);\r\n    var unixRelPath = normalizePath(relPath);\r\n\r\n    state.map.sources[idx] = unixRelPath;\r\n\r\n    if (absPath !== file.path) {\r\n      // Load content from file async\r\n      return fs.readFile(absPath, onRead);\r\n    }\r\n\r\n    // If current file: use content\r\n    assignSourcesContent(state.content, idx);\r\n    cb();\r\n\r\n    function onRead(err, data) {\r\n      if (err) {\r\n        assignSourcesContent(null, idx);\r\n        return cb();\r\n      }\r\n      assignSourcesContent(removeBOM(data).toString('utf8'), idx);\r\n      cb();\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapsLoaded(file, state, callback) {\r\n\r\n  if (!state.map) {\r\n    state.map = {\r\n      version: 3,\r\n      names: [],\r\n      mappings: '',\r\n      sources: [normalizePath(file.relative)],\r\n      sourcesContent: [state.content],\r\n    };\r\n  }\r\n\r\n  state.map.file = normalizePath(file.relative);\r\n  file.sourceMap = state.map;\r\n\r\n  callback();\r\n}\r\n\r\nfunction addSourceMaps(file, state, callback) {\r\n  var tasks = [\r\n    loadSourceMap,\r\n    fixImportedSourceMap,\r\n    mapsLoaded,\r\n  ];\r\n\r\n  function apply(fn, key, cb) {\r\n    fn(file, state, cb);\r\n  }\r\n\r\n  nal.mapSeries(tasks, apply, done);\r\n\r\n  function done() {\r\n    callback(null, file);\r\n  }\r\n}\r\n\r\n/* Write Helpers */\r\nfunction createSourceMapFile(opts) {\r\n  return new File({\r\n    cwd: opts.cwd,\r\n    base: opts.base,\r\n    path: opts.path,\r\n    contents: new Buffer(JSON.stringify(opts.content)),\r\n    stat: {\r\n      isFile: function() {\r\n        return true;\r\n      },\r\n      isDirectory: function() {\r\n        return false;\r\n      },\r\n      isBlockDevice: function() {\r\n        return false;\r\n      },\r\n      isCharacterDevice: function() {\r\n        return false;\r\n      },\r\n      isSymbolicLink: function() {\r\n        return false;\r\n      },\r\n      isFIFO: function() {\r\n        return false;\r\n      },\r\n      isSocket: function() {\r\n        return false;\r\n      },\r\n    },\r\n  });\r\n}\r\n\r\nvar needsMultiline = ['.css'];\r\n\r\nfunction getCommentOptions(extname) {\r\n  var opts = {\r\n    multiline: (needsMultiline.indexOf(extname) !== -1),\r\n  };\r\n\r\n  return opts;\r\n}\r\n\r\nfunction writeSourceMaps(file, destPath, callback) {\r\n  var sourceMapFile;\r\n  var commentOpts = getCommentOptions(file.extname);\r\n\r\n  var comment;\r\n  if (destPath == null) {\r\n    // Encode source map into comment\r\n    comment = convert.fromObject(file.sourceMap).toComment(commentOpts);\r\n  } else {\r\n    var mapFile = path.join(destPath, file.relative) + '.map';\r\n    var sourceMapPath = path.join(file.base, mapFile);\r\n\r\n    // Create new sourcemap File\r\n    sourceMapFile = createSourceMapFile({\r\n      cwd: file.cwd,\r\n      base: file.base,\r\n      path: sourceMapPath,\r\n      content: file.sourceMap,\r\n    });\r\n\r\n    var sourcemapLocation = path.relative(file.dirname, sourceMapPath);\r\n\r\n    sourcemapLocation = normalizePath(sourcemapLocation);\r\n\r\n    comment = convert.generateMapFileComment(sourcemapLocation, commentOpts);\r\n  }\r\n\r\n  // Append source map comment\r\n  file.contents = appendBuffer(file.contents, comment);\r\n\r\n  callback(null, file, sourceMapFile);\r\n}\r\n\r\nmodule.exports = {\r\n  addSourceMaps: addSourceMaps,\r\n  writeSourceMaps: writeSourceMaps,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}