{"ast":null,"code":"'use strict'; // Built-in types\n\nvar types = ['object', 'number', 'string', 'symbol', 'boolean', 'date', 'function' // Weird to expose this\n];\n\nfunction normalize(coercer, value) {\n  if (typeof value === 'function') {\n    if (coercer === 'function') {\n      return value;\n    }\n\n    value = value.apply(this, slice(arguments, 2));\n  }\n\n  return coerce(this, coercer, value);\n}\n\nfunction coerce(ctx, coercer, value) {\n  // Handle built-in types\n  if (typeof coercer === 'string') {\n    if (coerce[coercer]) {\n      return coerce[coercer].call(ctx, value);\n    }\n\n    return typeOf(coercer, value);\n  } // Handle custom coercer\n\n\n  if (typeof coercer === 'function') {\n    return coercer.call(ctx, value);\n  } // Array of coercers, try in order until one returns a non-null value\n\n\n  var result;\n  coercer.some(function (coercer) {\n    result = coerce(ctx, coercer, value);\n    return result != null;\n  });\n  return result;\n}\n\ncoerce.string = function (value) {\n  if (value != null && typeof value === 'object' && typeof value.toString === 'function') {\n    value = value.toString();\n  }\n\n  return typeOf('string', primitive(value));\n};\n\ncoerce.number = function (value) {\n  return typeOf('number', primitive(value));\n};\n\ncoerce.boolean = function (value) {\n  return typeOf('boolean', primitive(value));\n};\n\ncoerce.date = function (value) {\n  value = primitive(value);\n\n  if (typeof value === 'number' && !isNaN(value) && isFinite(value)) {\n    return new Date(value);\n  }\n};\n\nfunction typeOf(type, value) {\n  if (typeof value === type) {\n    return value;\n  }\n}\n\nfunction primitive(value) {\n  if (value != null && typeof value === 'object' && typeof value.valueOf === 'function') {\n    value = value.valueOf();\n  }\n\n  return value;\n}\n\nfunction slice(value, from) {\n  return Array.prototype.slice.call(value, from);\n} // Add methods for each type\n\n\ntypes.forEach(function (type) {\n  // Make it an array for easier concat\n  var typeArg = [type];\n\n  normalize[type] = function () {\n    var args = slice(arguments);\n    return normalize.apply(this, typeArg.concat(args));\n  };\n});\nmodule.exports = normalize;","map":{"version":3,"sources":["C:/frontend/node_modules/value-or-function/index.js"],"names":["types","normalize","coercer","value","apply","slice","arguments","coerce","ctx","call","typeOf","result","some","string","toString","primitive","number","boolean","date","isNaN","isFinite","Date","type","valueOf","from","Array","prototype","forEach","typeArg","args","concat","module","exports"],"mappings":"AAAA,a,CAEA;;AACA,IAAIA,KAAK,GAAG,CACV,QADU,EAEV,QAFU,EAGV,QAHU,EAIV,QAJU,EAKV,SALU,EAMV,MANU,EAOV,UAPU,CAOE;AAPF,CAAZ;;AAWA,SAASC,SAAT,CAAmBC,OAAnB,EAA4BC,KAA5B,EAAmC;AACjC,MAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AAC/B,QAAID,OAAO,KAAK,UAAhB,EAA4B;AAC1B,aAAOC,KAAP;AACD;;AACDA,IAAAA,KAAK,GAAGA,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkBC,KAAK,CAACC,SAAD,EAAY,CAAZ,CAAvB,CAAR;AACD;;AACD,SAAOC,MAAM,CAAC,IAAD,EAAOL,OAAP,EAAgBC,KAAhB,CAAb;AACD;;AAGD,SAASI,MAAT,CAAgBC,GAAhB,EAAqBN,OAArB,EAA8BC,KAA9B,EAAqC;AAEnC;AACA,MAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,QAAIK,MAAM,CAACL,OAAD,CAAV,EAAqB;AACnB,aAAOK,MAAM,CAACL,OAAD,CAAN,CAAgBO,IAAhB,CAAqBD,GAArB,EAA0BL,KAA1B,CAAP;AACD;;AACD,WAAOO,MAAM,CAACR,OAAD,EAAUC,KAAV,CAAb;AACD,GARkC,CAUnC;;;AACA,MAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjC,WAAOA,OAAO,CAACO,IAAR,CAAaD,GAAb,EAAkBL,KAAlB,CAAP;AACD,GAbkC,CAenC;;;AACA,MAAIQ,MAAJ;AACAT,EAAAA,OAAO,CAACU,IAAR,CAAa,UAASV,OAAT,EAAkB;AAC7BS,IAAAA,MAAM,GAAGJ,MAAM,CAACC,GAAD,EAAMN,OAAN,EAAeC,KAAf,CAAf;AACA,WAAOQ,MAAM,IAAI,IAAjB;AACD,GAHD;AAKA,SAAOA,MAAP;AACD;;AAGDJ,MAAM,CAACM,MAAP,GAAgB,UAASV,KAAT,EAAgB;AAC9B,MAAIA,KAAK,IAAI,IAAT,IACF,OAAOA,KAAP,KAAiB,QADf,IAEF,OAAOA,KAAK,CAACW,QAAb,KAA0B,UAF5B,EAEwC;AAEtCX,IAAAA,KAAK,GAAGA,KAAK,CAACW,QAAN,EAAR;AACD;;AACD,SAAOJ,MAAM,CAAC,QAAD,EAAWK,SAAS,CAACZ,KAAD,CAApB,CAAb;AACD,CARD;;AAWAI,MAAM,CAACS,MAAP,GAAgB,UAASb,KAAT,EAAgB;AAC9B,SAAOO,MAAM,CAAC,QAAD,EAAWK,SAAS,CAACZ,KAAD,CAApB,CAAb;AACD,CAFD;;AAKAI,MAAM,CAACU,OAAP,GAAiB,UAASd,KAAT,EAAgB;AAC/B,SAAOO,MAAM,CAAC,SAAD,EAAYK,SAAS,CAACZ,KAAD,CAArB,CAAb;AACD,CAFD;;AAKAI,MAAM,CAACW,IAAP,GAAc,UAASf,KAAT,EAAgB;AAC5BA,EAAAA,KAAK,GAAGY,SAAS,CAACZ,KAAD,CAAjB;;AACA,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAACgB,KAAK,CAAChB,KAAD,CAAnC,IAA8CiB,QAAQ,CAACjB,KAAD,CAA1D,EAAmE;AACjE,WAAO,IAAIkB,IAAJ,CAASlB,KAAT,CAAP;AACD;AACF,CALD;;AAQA,SAASO,MAAT,CAAgBY,IAAhB,EAAsBnB,KAAtB,EAA6B;AAC3B,MAAI,OAAOA,KAAP,KAAiBmB,IAArB,EAA2B;AACzB,WAAOnB,KAAP;AACD;AACF;;AAGD,SAASY,SAAT,CAAmBZ,KAAnB,EAA0B;AACxB,MAAIA,KAAK,IAAI,IAAT,IACF,OAAOA,KAAP,KAAiB,QADf,IAEF,OAAOA,KAAK,CAACoB,OAAb,KAAyB,UAF3B,EAEuC;AAErCpB,IAAAA,KAAK,GAAGA,KAAK,CAACoB,OAAN,EAAR;AACD;;AACD,SAAOpB,KAAP;AACD;;AAED,SAASE,KAAT,CAAeF,KAAf,EAAsBqB,IAAtB,EAA4B;AAC1B,SAAOC,KAAK,CAACC,SAAN,CAAgBrB,KAAhB,CAAsBI,IAAtB,CAA2BN,KAA3B,EAAkCqB,IAAlC,CAAP;AACD,C,CAED;;;AACAxB,KAAK,CAAC2B,OAAN,CAAc,UAASL,IAAT,EAAe;AAC3B;AACA,MAAIM,OAAO,GAAG,CAACN,IAAD,CAAd;;AAEArB,EAAAA,SAAS,CAACqB,IAAD,CAAT,GAAkB,YAAW;AAC3B,QAAIO,IAAI,GAAGxB,KAAK,CAACC,SAAD,CAAhB;AACA,WAAOL,SAAS,CAACG,KAAV,CAAgB,IAAhB,EAAsBwB,OAAO,CAACE,MAAR,CAAeD,IAAf,CAAtB,CAAP;AACD,GAHD;AAID,CARD;AAUAE,MAAM,CAACC,OAAP,GAAiB/B,SAAjB","sourcesContent":["'use strict';\r\n\r\n// Built-in types\r\nvar types = [\r\n  'object',\r\n  'number',\r\n  'string',\r\n  'symbol',\r\n  'boolean',\r\n  'date',\r\n  'function', // Weird to expose this\r\n];\r\n\r\n\r\nfunction normalize(coercer, value) {\r\n  if (typeof value === 'function') {\r\n    if (coercer === 'function') {\r\n      return value;\r\n    }\r\n    value = value.apply(this, slice(arguments, 2));\r\n  }\r\n  return coerce(this, coercer, value);\r\n}\r\n\r\n\r\nfunction coerce(ctx, coercer, value) {\r\n\r\n  // Handle built-in types\r\n  if (typeof coercer === 'string') {\r\n    if (coerce[coercer]) {\r\n      return coerce[coercer].call(ctx, value);\r\n    }\r\n    return typeOf(coercer, value);\r\n  }\r\n\r\n  // Handle custom coercer\r\n  if (typeof coercer === 'function') {\r\n    return coercer.call(ctx, value);\r\n  }\r\n\r\n  // Array of coercers, try in order until one returns a non-null value\r\n  var result;\r\n  coercer.some(function(coercer) {\r\n    result = coerce(ctx, coercer, value);\r\n    return result != null;\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n\r\ncoerce.string = function(value) {\r\n  if (value != null &&\r\n    typeof value === 'object' &&\r\n    typeof value.toString === 'function') {\r\n\r\n    value = value.toString();\r\n  }\r\n  return typeOf('string', primitive(value));\r\n};\r\n\r\n\r\ncoerce.number = function(value) {\r\n  return typeOf('number', primitive(value));\r\n};\r\n\r\n\r\ncoerce.boolean = function(value) {\r\n  return typeOf('boolean', primitive(value));\r\n};\r\n\r\n\r\ncoerce.date = function(value) {\r\n  value = primitive(value);\r\n  if (typeof value === 'number' && !isNaN(value) && isFinite(value)) {\r\n    return new Date(value);\r\n  }\r\n};\r\n\r\n\r\nfunction typeOf(type, value) {\r\n  if (typeof value === type) {\r\n    return value;\r\n  }\r\n}\r\n\r\n\r\nfunction primitive(value) {\r\n  if (value != null &&\r\n    typeof value === 'object' &&\r\n    typeof value.valueOf === 'function') {\r\n\r\n    value = value.valueOf();\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction slice(value, from) {\r\n  return Array.prototype.slice.call(value, from);\r\n}\r\n\r\n// Add methods for each type\r\ntypes.forEach(function(type) {\r\n  // Make it an array for easier concat\r\n  var typeArg = [type];\r\n\r\n  normalize[type] = function() {\r\n    var args = slice(arguments);\r\n    return normalize.apply(this, typeArg.concat(args));\r\n  };\r\n});\r\n\r\nmodule.exports = normalize;\r\n"]},"metadata":{},"sourceType":"script"}