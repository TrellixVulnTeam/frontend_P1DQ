{"ast":null,"code":"var _jsxFileName = \"C:\\\\frontend\\\\src\\\\test.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction test() {\n  _s();\n\n  const [tests, settests] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const gettest = async () => {\n      try {\n        // 요청이 시작 할 때에는 error 와 users 를 초기화하고\n        setError(null);\n        setUsers(null); // loading 상태를 true 로 바꿉니다.\n\n        setLoading(true);\n        const response = await axios.get('http://localhost:8080/api/test');\n        setUsers(response.data); // 데이터는 response.data 안에 들어있습니다.\n      } catch (e) {\n        setError(e);\n      }\n\n      setLoading(false);\n    };\n\n    fetchUsers();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uB85C\\uB529\\uC911..\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 21\n  }, this);\n  if (!users) return null;\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: tests.map(test => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", test.number1, \" ,\", test.number2]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(test, \"LMdh9fBQKTmq24g3sJ59fFNroC4=\");\n\nexport default test;","map":{"version":3,"sources":["C:/frontend/src/test.js"],"names":["React","useState","useEffect","axios","test","tests","settests","loading","setLoading","error","setError","gettest","setUsers","response","get","data","e","fetchUsers","users","map","number1","number2"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACd,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,OAAO,GAAG,YAAY;AAC1B,UAAI;AACF;AACAD,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,QAAAA,QAAQ,CAAC,IAAD,CAAR,CAHE,CAIF;;AACAJ,QAAAA,UAAU,CAAC,IAAD,CAAV;AACA,cAAMK,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAN,CACrB,gCADqB,CAAvB;AAGAF,QAAAA,QAAQ,CAACC,QAAQ,CAACE,IAAV,CAAR,CATE,CASuB;AAC1B,OAVD,CAUE,OAAOC,CAAP,EAAU;AACVN,QAAAA,QAAQ,CAACM,CAAD,CAAR;AACD;;AACDR,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAfD;;AAiBAS,IAAAA,UAAU;AACX,GAnBQ,EAmBN,EAnBM,CAAT;AAqBA,MAAIV,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIE,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,MAAI,CAACS,KAAL,EAAY,OAAO,IAAP;AACZ,sBACE;AAAA,cACGb,KAAK,CAACc,GAAN,CAAUf,IAAI,iBACb;AAAA,sBAAKA,IAAI,CAACgB,OAAV,QAAqBhB,IAAI,CAACiB,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAtCQjB,I;;AAwCT,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction test() {\r\n  const [tests, settests] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const gettest = async () => {\r\n      try {\r\n        // 요청이 시작 할 때에는 error 와 users 를 초기화하고\r\n        setError(null);\r\n        setUsers(null);\r\n        // loading 상태를 true 로 바꿉니다.\r\n        setLoading(true);\r\n        const response = await axios.get(\r\n          'http://localhost:8080/api/test'\r\n        );\r\n        setUsers(response.data); // 데이터는 response.data 안에 들어있습니다.\r\n      } catch (e) {\r\n        setError(e);\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  if (loading) return <div>로딩중..</div>;\r\n  if (error) return <div>에러가 발생했습니다</div>;\r\n  if (!users) return null;\r\n  return (\r\n    <ul>\r\n      {tests.map(test => (\r\n        <p> {test.number1} ,{test.number2}</p>\r\n         \r\n       \r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default test;"]},"metadata":{},"sourceType":"module"}